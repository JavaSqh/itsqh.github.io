<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>imgTest</title>
    <link href="/itsqh.github.io/2022/10/15/imgTest/"/>
    <url>/itsqh.github.io/2022/10/15/imgTest/</url>
    
    <content type="html"><![CDATA[<img src="/itsqh.github.io/itsqh.github.io/2022/10/15/imgTest/2022/10/15/imgTest/2.jpg" class title="This is an example image"><img src="/itsqh.github.io/itsqh.github.io/2022/10/15/imgTest/2022/10/15/imgTest/2.jpg" class title="2jmage"><p><img src="/itsqh.github.io/itsqh.github.io/2022/10/15/imgTest/logo.jpg" alt="logo"></p><p><img src="/itsqh.github.io/itsqh.github.io/2022/10/15/imgTest/1.png" alt="1.png 看不到"></p><p><img src="/itsqh.github.io/itsqh.github.io/2022/10/15/imgTest/imgTest/1.png" alt="imgTest\1.png  可以看到"></p><p><img src="/itsqh.github.io/itsqh.github.io/2022/10/15/imgTest/work_NodeJs\hexo-blog\source_posts\imgTest\1.png" alt="S:\work\_NodeJs\hexo-blog\source\_posts\imgTest\1.png 可以看到"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>VMware安装CentOS7</title>
    <link href="/itsqh.github.io/2022/10/15/VMware%E5%AE%89%E8%A3%85CentOS7/"/>
    <url>/itsqh.github.io/2022/10/15/VMware%E5%AE%89%E8%A3%85CentOS7/</url>
    
    <content type="html"><![CDATA[<p>镜像网站：<a href="https://mirror.iscas.ac.cn/centos/7/isos/x86_64/">https://mirror.iscas.ac.cn/centos/7/isos/x86_64/</a></p><p>我使用的是: CentOS-7-x86_64-DVD-1908.iso</p><p><img src="/itsqh.github.io/itsqh.github.io/2022/10/15/VMware%E5%AE%89%E8%A3%85CentOS7/2022/10/15/VMware%E5%AE%89%E8%A3%85CentOS7/1.%E6%96%B0%E5%BB%BA%E8%99%9A%E6%8B%9F%E6%9C%BA.PNG" alt="1.png 看不到"></p><p><img src="/itsqh.github.io/itsqh.github.io/2022/10/15/VMware%E5%AE%89%E8%A3%85CentOS7/VMware%E5%AE%89%E8%A3%85CentOS7/1.%E6%96%B0%E5%BB%BA%E8%99%9A%E6%8B%9F%E6%9C%BA.PNG" alt="imgTest\1.png  可以看到"></p><ol><li><p>选择文件-新建虚拟机</p><p><img src="/itsqh.github.io/itsqh.github.io/2022/10/15/VMware%E5%AE%89%E8%A3%85CentOS7/VMware%E5%AE%89%E8%A3%85CentOS7/1.%E6%96%B0%E5%BB%BA%E8%99%9A%E6%8B%9F%E6%9C%BA.PNG" alt="新建虚拟机"></p></li><li><p>选择自定义虚拟机，下一步</p><p><img src="/itsqh.github.io/itsqh.github.io/2022/10/15/VMware%E5%AE%89%E8%A3%85CentOS7/2.%E8%87%AA%E5%AE%9A%E4%B9%89%E8%99%9A%E6%8B%9F%E6%9C%BA.PNG" alt="自定义虚拟机"></p></li><li><p>下一步</p><p><img src="/itsqh.github.io/itsqh.github.io/2022/10/15/VMware%E5%AE%89%E8%A3%85CentOS7/work\学习笔记\Liunx\VM安装CentOS\3.下一步.png"></p></li><li><p>选择镜像</p><p><img src="/itsqh.github.io/itsqh.github.io/2022/10/15/VMware%E5%AE%89%E8%A3%85CentOS7/work\学习笔记\Liunx\VM安装CentOS\4.选择镜像.png"></p></li><li><p>自定义镜像名称以及位置</p><p><img src="/itsqh.github.io/itsqh.github.io/2022/10/15/VMware%E5%AE%89%E8%A3%85CentOS7/work\学习笔记\Liunx\VM安装CentOS\5.储存位置以及名称.png"></p></li><li><p>选择处理器数量以及内核数量</p><p><img src="/itsqh.github.io/itsqh.github.io/2022/10/15/VMware%E5%AE%89%E8%A3%85CentOS7/work\学习笔记\Liunx\VM安装CentOS\6.选择合适自己的处理器数量.png"></p></li><li><p>设置虚拟机的内存大小</p><p><img src="/itsqh.github.io/itsqh.github.io/2022/10/15/VMware%E5%AE%89%E8%A3%85CentOS7/work\学习笔记\Liunx\VM安装CentOS\7.选择内存.png"></p></li><li><p>选择网络类型，后续配置NAT模式的网络</p><p><img src="/itsqh.github.io/itsqh.github.io/2022/10/15/VMware%E5%AE%89%E8%A3%85CentOS7/work\学习笔记\Liunx\VM安装CentOS\8.选择NAT模式.png"></p></li><li><p>默认下一步</p><p><img src="/itsqh.github.io/itsqh.github.io/2022/10/15/VMware%E5%AE%89%E8%A3%85CentOS7/work\学习笔记\Liunx\VM安装CentOS\9.下一步.png"></p><p><img src="/itsqh.github.io/itsqh.github.io/2022/10/15/VMware%E5%AE%89%E8%A3%85CentOS7/work\学习笔记\Liunx\VM安装CentOS\10.下一步.png"></p><p><img src="/itsqh.github.io/itsqh.github.io/2022/10/15/VMware%E5%AE%89%E8%A3%85CentOS7/work\学习笔记\Liunx\VM安装CentOS\11.下一步.png"></p></li><li><p>配置自己的磁盘大小</p><p><img src="/itsqh.github.io/itsqh.github.io/2022/10/15/VMware%E5%AE%89%E8%A3%85CentOS7/work\学习笔记\Liunx\VM安装CentOS\12.选择磁盘大小.png"></p></li><li><p>指定磁盘文件位置以及名称，下一步之后点击完成即可</p><p><img src="/itsqh.github.io/itsqh.github.io/2022/10/15/VMware%E5%AE%89%E8%A3%85CentOS7/work\学习笔记\Liunx\VM安装CentOS\13.下一步.png"></p><p><img src="/itsqh.github.io/itsqh.github.io/2022/10/15/VMware%E5%AE%89%E8%A3%85CentOS7/work\学习笔记\Liunx\VM安装CentOS\14.完成.png"></p></li><li><p>之后系统会自动启动，选择Install CentOS 7</p><p><img src="/itsqh.github.io/itsqh.github.io/2022/10/15/VMware%E5%AE%89%E8%A3%85CentOS7/work\学习笔记\Liunx\VM安装CentOS\15启动.png"></p></li><li><p>下拉找到中文，选择简体中文</p><p><img src="/itsqh.github.io/itsqh.github.io/2022/10/15/VMware%E5%AE%89%E8%A3%85CentOS7/work\学习笔记\Liunx\VM安装CentOS\16.选择语言.png"></p></li><li><p>安装黄色的提示信息，操作即可</p><p><img src="/itsqh.github.io/itsqh.github.io/2022/10/15/VMware%E5%AE%89%E8%A3%85CentOS7/work\学习笔记\Liunx\VM安装CentOS\17.等着.png"></p><p><img src="/itsqh.github.io/itsqh.github.io/2022/10/15/VMware%E5%AE%89%E8%A3%85CentOS7/work\学习笔记\Liunx\VM安装CentOS\18安装位置.png"></p><ul><li>安装位置，选择的默认的即可</li></ul><p><img src="/itsqh.github.io/itsqh.github.io/2022/10/15/VMware%E5%AE%89%E8%A3%85CentOS7/work\学习笔记\Liunx\VM安装CentOS\19.安装.png"></p><ul><li><strong>完成</strong>之后，点击<strong>开始安装</strong>即可</li></ul></li><li><p>进行Root用户密码设置</p><p><img src="/itsqh.github.io/itsqh.github.io/2022/10/15/VMware%E5%AE%89%E8%A3%85CentOS7/work\学习笔记\Liunx\VM安装CentOS\20.继续.png"></p><ul><li>设置Root密码界面</li></ul><p><img src="/itsqh.github.io/itsqh.github.io/2022/10/15/VMware%E5%AE%89%E8%A3%85CentOS7/work\学习笔记\Liunx\VM安装CentOS\22.设置root密码.png"></p><ul><li><p>设置完成密码之后，等待安装即可</p><p><img src="/itsqh.github.io/itsqh.github.io/2022/10/15/VMware%E5%AE%89%E8%A3%85CentOS7/work\学习笔记\Liunx\VM安装CentOS\23.等待安装即可.png"></p></li><li><p>等待安装完成，点击重启即可</p><p><img src="/itsqh.github.io/itsqh.github.io/2022/10/15/VMware%E5%AE%89%E8%A3%85CentOS7/work\学习笔记\Liunx\VM安装CentOS\24.安装成功重启.png"></p></li></ul></li><li><p>等待系统重启之后，选择第一条回车</p><p><img src="/itsqh.github.io/itsqh.github.io/2022/10/15/VMware%E5%AE%89%E8%A3%85CentOS7/work\学习笔记\Liunx\VM安装CentOS\25.选择第一个即可.png"></p></li><li><p>输入账号密码，密码输入的时候不显示，回车即可</p><p><img src="/itsqh.github.io/itsqh.github.io/2022/10/15/VMware%E5%AE%89%E8%A3%85CentOS7/work\学习笔记\Liunx\VM安装CentOS\27.输入账号密码.png"></p></li><li><p>完成登录，进入系统</p><p><img src="/itsqh.github.io/itsqh.github.io/2022/10/15/VMware%E5%AE%89%E8%A3%85CentOS7/work\学习笔记\Liunx\VM安装CentOS\28.完成.png"></p></li></ol>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Docker中容器相关操作</title>
    <link href="/itsqh.github.io/2022/09/02/Docker%E4%B8%AD%E5%AE%B9%E5%99%A8%E7%9B%B8%E5%85%B3%E6%93%8D%E4%BD%9C/"/>
    <url>/itsqh.github.io/2022/09/02/Docker%E4%B8%AD%E5%AE%B9%E5%99%A8%E7%9B%B8%E5%85%B3%E6%93%8D%E4%BD%9C/</url>
    
    <content type="html"><![CDATA[<h5 id="查看Docker引擎中运行的容器"><a href="#查看Docker引擎中运行的容器" class="headerlink" title="查看Docker引擎中运行的容器"></a>查看Docker引擎中运行的容器</h5><p><code>Docker ps</code></p><h5 id="镜像下载"><a href="#镜像下载" class="headerlink" title="镜像下载"></a>镜像下载</h5><p><code>docker pull &lt;镜像名称&gt;</code></p>]]></content>
    
    
    
    <tags>
      
      <tag>Docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Centos7的安装</title>
    <link href="/itsqh.github.io/2022/09/02/CentOS7%E7%9A%84%E5%AE%89%E8%A3%85/"/>
    <url>/itsqh.github.io/2022/09/02/CentOS7%E7%9A%84%E5%AE%89%E8%A3%85/</url>
    
    <content type="html"><![CDATA[<p>下载镜像网站：<a href="https://mirror.iscas.ac.cn/centos/7/isos/x86_64/">https://mirror.iscas.ac.cn/centos/7/isos/x86_64/</a></p><h3 id="配置java环境"><a href="#配置java环境" class="headerlink" title="配置java环境"></a>配置java环境</h3><p>打开配置文件 <code>vim /etc/profile</code><br>在文件末尾追加</p><p><code>JAVA_HOME=/root/java/jdk1.8.0_341 CLASSPATH=%JAVA_HOME%/lib:%JAVA_HOME%/jre/lib PATH=$PATH:$JAVA_HOME/bin:$JAVA_HOME/jre/bin export PATH CLASSPATH JAVA_HOME</code></p><p>注意：&#x2F;usr&#x2F;local&#x2F;java&#x2F;jdk文件名中的jdk文件名需要改为自己准确的文件名称哦</p><p>然后按esc退出编辑模式，按shift+:输入wq保存并退出</p><p>使配置文件生效</p><ul><li>执行命令：<code>source /etc/profile</code></li></ul><p>第六步：检查是否安装成功</p><ul><li>执行命令：<code>java -version</code></li></ul><p>bad ELF interpreter: No such file or directory，安装下glic即可</p><p><code>yum install glibc.i686</code></p><h3 id="配置系统网络环境"><a href="#配置系统网络环境" class="headerlink" title="配置系统网络环境"></a>配置系统网络环境</h3><p>点击虚拟机左侧，选中安装的系统，右键，设置，查看网络连接信息,【硬件】页签，选择【网络适配器】，网络连接选择【NAT…】，点击【确定】按钮 </p><p>在虚拟机中，选中安装的系统，点击工具条中的【编辑】-选择【虚拟网络编辑器】</p><p>选中【VMnet8】，点击【NAT设置】，查看本地IP网段<br>点击【DHCP设置】，查看IP起始段，方便设置IP地址 </p><p>进入命令窗口，切换到root的根目录，<br>输入命令：vi &#x2F;etc&#x2F;sysconfig&#x2F;network-scripts&#x2F;ifcfg-ens33 </p><p>点击键盘【i】键，修改并增加如下内容信息，完成之后，点击键盘【Esc】键，输入【:wq!】,点击回车键，保存退出 </p><p>TYPE&#x3D;Ethernet<br>PROXY_METHOD&#x3D;none<br>BROWSER_ONLY&#x3D;no<br>BOOTPROTO&#x3D;static<br>DEFROUTE&#x3D;yes<br>IPV4_FAILURE_FATAL&#x3D;no<br>IPV6INIT&#x3D;yes<br>IPV6_AUTOCONF&#x3D;yes<br>IPV6_DEFROUTE&#x3D;yes<br>IPV6_FAILURE_FATAL&#x3D;no<br>IPV6_ADDR_GEN_MODE&#x3D;stable-privacy<br>NAME&#x3D;ens33<br>UUID&#x3D;默认即可<br>DEVICE&#x3D;ens33<br>ONBOOT&#x3D;yes<br>IPADDR&#x3D;192.168.168.226<br>GATEWAY&#x3D;192.168.168.2<br>NETMASK&#x3D;255.255.255.0<br>DNS1&#x3D;114.114.114.114<br>输入命令，使配置有效service network restart </p><p>配置完毕后，查询IP信息，并确认是否网络畅通</p>]]></content>
    
    
    
    <tags>
      
      <tag>CentOS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Liunx常用命令</title>
    <link href="/itsqh.github.io/2022/09/02/Liunx%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <url>/itsqh.github.io/2022/09/02/Liunx%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<h2 id="一、登录与注销"><a href="#一、登录与注销" class="headerlink" title="一、登录与注销"></a>一、登录与注销</h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-number">1</span>)sudo useradd lilei  <span class="hljs-regexp">//</span>添加用户 (不能被立即使用，需设置密码 sudo passwd lilei)  <br><span class="hljs-number">2</span>)sudo adduser lilei  <span class="hljs-regexp">//</span>添加用户<br><span class="hljs-number">3</span>)login  <span class="hljs-regexp">//</span>登录或切换用户<br><span class="hljs-number">4</span>)logout <span class="hljs-regexp">//</span>注销用户（命令行）  <span class="hljs-keyword">exit</span>(shell-退出控制台)<br><span class="hljs-number">5</span>)shutdown -h <span class="hljs-number">10</span>  <span class="hljs-regexp">//</span><span class="hljs-number">10</span>分钟后自动关机shutdown -c  <span class="hljs-regexp">//</span>取消<br><span class="hljs-number">6</span>)halt(root用户)  <span class="hljs-regexp">//</span>关闭所有进程后自动关机<br><span class="hljs-number">7</span>)poweroff <span class="hljs-regexp">//</span>同上<br><span class="hljs-number">8</span>)shutdown -r <span class="hljs-number">10</span> <span class="hljs-regexp">//</span>十分钟后自动重启<br><span class="hljs-number">9</span>)init <span class="hljs-number">6</span>  <span class="hljs-regexp">//</span>重启 （<span class="hljs-number">0</span>-停机，<span class="hljs-number">1</span>-单用户，<span class="hljs-number">2</span>-多用户，<span class="hljs-number">3</span>-完全多用户，<span class="hljs-number">4</span>-图形化，<span class="hljs-number">5</span>-安全模式，<span class="hljs-number">6</span>-重启）<br><span class="hljs-number">10</span>)reboot  <span class="hljs-regexp">//</span>重启<br></code></pre></td></tr></table></figure><h2 id="二、目录与文件"><a href="#二、目录与文件" class="headerlink" title="二、目录与文件"></a>二、目录与文件</h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-number">1</span>)pwd   <span class="hljs-regexp">//</span>显示当前工作目录<br><span class="hljs-number">2</span>)mkdir mydir  <span class="hljs-regexp">//</span>创建工作目录<br><span class="hljs-number">3</span>)cd mydir  <span class="hljs-regexp">//</span>更改工作目录<br><span class="hljs-number">4</span>)rmdir mydir <span class="hljs-regexp">//</span>删除工作目录<br><span class="hljs-number">5</span>)touch myfile  <span class="hljs-regexp">//</span>创建文件<br><span class="hljs-number">6</span>)mv myfile mydir  <span class="hljs-regexp">//</span>移动目录或文件<br><span class="hljs-number">7</span>)cp myfile myfir  <span class="hljs-regexp">//</span>复制目录或文件<br><span class="hljs-number">8</span>)rm -rf mydir  <span class="hljs-regexp">//</span>删除目录或文件<br><span class="hljs-number">9</span>)ls -l myfile  <span class="hljs-regexp">//</span>查看文件最后被编辑时间<br><span class="hljs-number">10</span>)ls -lu myfile <span class="hljs-regexp">//</span>查看文件最后被访问时间<br><span class="hljs-number">11</span>)touch -at <span class="hljs-number">01011212</span> myfile  <span class="hljs-regexp">//</span>修改文件最后被访问时间<br><span class="hljs-number">12</span>)ls <span class="hljs-regexp">//</span>列出所有文件和目录<br><span class="hljs-number">13</span>)ls -a <span class="hljs-regexp">//</span>查看所有文件<br><span class="hljs-number">14</span>)ls -i <span class="hljs-regexp">//</span>显示文件索引节点号<br><span class="hljs-number">15</span>)ls -l <span class="hljs-regexp">//</span>详细显示<br><span class="hljs-number">16</span>)ls -m <span class="hljs-regexp">//</span>以逗号分隔<br><span class="hljs-number">17</span>)sudo apt-get install tree <br><span class="hljs-number">18</span>)tree -l<span class="hljs-regexp">//</span>以树状图列出目录内容<br><span class="hljs-number">19</span>)tree -a <span class="hljs-regexp">//</span>所有<br><span class="hljs-number">20</span>)tree -i <span class="hljs-regexp">//</span>不以阶梯状<br><span class="hljs-number">21</span>)tree -s  <span class="hljs-regexp">//</span>列出文件或目录大小<br><span class="hljs-number">22</span>)tree -t  <span class="hljs-regexp">//</span>按更改时间<br><span class="hljs-number">23</span>)file -b myfile  <span class="hljs-regexp">//</span>显示目录或文件的详细信息<br><span class="hljs-number">24</span>)stat myfile  <span class="hljs-regexp">//</span>同上<br></code></pre></td></tr></table></figure><h2 id="三、文件内容显示"><a href="#三、文件内容显示" class="headerlink" title="三、文件内容显示"></a>三、文件内容显示</h2><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver"><span class="hljs-number">1</span>)cat &gt; myfile <span class="hljs-comment"> //创建文件并编辑内容（ctrl+D结束编辑）</span><br><span class="hljs-number">2</span>)cat -n myfile <span class="hljs-comment"> //查看文件</span><br><span class="hljs-number">3</span>)chmod [u/g/o/<span class="hljs-keyword">a</span>][+/-/=][r/w/x] myfile <span class="hljs-comment"> //更改文件权限</span><br>u-user,g-group,o-others,<span class="hljs-keyword">a</span>-all  .   +-添加,<span class="hljs-comment">--删除,=-重置   .</span><br>r-<span class="hljs-built_in">read</span>读（<span class="hljs-number">4</span>），w-<span class="hljs-built_in">write</span>写（<span class="hljs-number">2</span>），x-execute执行（<span class="hljs-number">1</span>）<br><span class="hljs-number">4</span>)more myfile <span class="hljs-comment"> //分页往后显示文件（Space空格）</span><br><span class="hljs-number">5</span>)less myfile <span class="hljs-comment"> //分页自由显示文件（Page Down / Page Up）</span><br><span class="hljs-number">6</span>)head (<span class="hljs-number">-10</span>) myfile <span class="hljs-comment"> //指定显示文件前若干行（默认前10）</span><br><span class="hljs-number">7</span>)tail (<span class="hljs-number">-10</span>) myfile <span class="hljs-comment"> //指定显示文件后若干行（默认后10）</span><br></code></pre></td></tr></table></figure><h2 id="四、文件内容处理"><a href="#四、文件内容处理" class="headerlink" title="四、文件内容处理"></a>四、文件内容处理</h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-number">1</span>)sort myfile  <span class="hljs-regexp">//</span>对文件内容进行排序<br><span class="hljs-number">2</span>)sort -r myfile  <span class="hljs-regexp">//</span>逆序<br><span class="hljs-number">3</span>)uniq myfile  <span class="hljs-regexp">//</span>检查文件中的重复内容<br><span class="hljs-number">4</span>)grep （-c）‘a’ myfile  <span class="hljs-regexp">//</span>在文件中查找指定内容 (显示行号)<br><span class="hljs-number">5</span>)diff myfile01 myfile02  <span class="hljs-regexp">//</span>对不同文件进行比较<br><span class="hljs-number">6</span>)diff3 myfile01 myfile02 myfile03  <span class="hljs-regexp">//</span>三个文件<br><span class="hljs-number">7</span>)sdiff myfile01 myfile02  <span class="hljs-regexp">//</span>合并<br><span class="hljs-number">8</span>)cmp myfile01 myfile02  <span class="hljs-regexp">//</span>通过字节对不同文件进行比较<br><span class="hljs-number">9</span>)comm myfile01 myfile02  <span class="hljs-regexp">//</span>对有序文件进行比较<br><span class="hljs-number">10</span>)cut -b(-c)(-d) <span class="hljs-number">2</span>(<span class="hljs-number">3</span>) myfile  <span class="hljs-regexp">//</span>对文件内容进行剪切<br><span class="hljs-number">11</span>)paste myfile02 myfile01 <span class="hljs-regexp">//</span>对文件内容进行粘贴 <span class="hljs-number">02</span>-）<span class="hljs-number">01</span><br><span class="hljs-number">12</span>)wc （-参数） myfile  <span class="hljs-regexp">//</span>对文件内容进行统计 （c-字符数,w-单词数,l-行数）<br></code></pre></td></tr></table></figure><h2 id="五、压缩"><a href="#五、压缩" class="headerlink" title="五、压缩"></a>五、压缩</h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-number">1</span>)zip myfile.zip myfile  <span class="hljs-regexp">//</span>压缩<br><span class="hljs-number">2</span>)zip -d myfile.zip myfile  <span class="hljs-regexp">//</span>添加<br><span class="hljs-number">3</span>)zip -m myfile.zip myfile  <span class="hljs-regexp">//</span>删除<br><span class="hljs-number">4</span>)unzip -o myfile.zip  <span class="hljs-regexp">//</span>解压（覆盖）<br><span class="hljs-number">5</span>)unzip -n myfile.zip  <span class="hljs-regexp">//</span>解压（不覆盖）<br><span class="hljs-number">6</span>)zipinfo myfile.zip  <span class="hljs-regexp">//</span>列出压缩文件信息<br><span class="hljs-number">7</span>)  tar -xvf  myfile.tar.gz<span class="hljs-regexp">//</span>解压<br></code></pre></td></tr></table></figure><h2 id="六、获取帮助"><a href="#六、获取帮助" class="headerlink" title="六、获取帮助"></a>六、获取帮助</h2><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs stata">1)<span class="hljs-keyword">man</span> <span class="hljs-keyword">ls</span>  <span class="hljs-comment">//获取帮助</span><br>2)<span class="hljs-keyword">man</span> -k <span class="hljs-keyword">ls</span>  <span class="hljs-comment">//不清楚完整名字</span><br>3)whatis <span class="hljs-keyword">ls</span>  <span class="hljs-comment">//获取帮助</span><br>4)<span class="hljs-keyword">help</span> <span class="hljs-keyword">cd</span>  / <span class="hljs-keyword">cd</span> –<span class="hljs-keyword">help</span>  <span class="hljs-comment">//获取帮助 -d(简短描述) -s(用法简介)</span><br>5)info who  <span class="hljs-comment">//获取帮助</span><br></code></pre></td></tr></table></figure><h2 id="七、其他命令"><a href="#七、其他命令" class="headerlink" title="七、其他命令"></a>七、其他命令</h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-number">1</span>)clear  <span class="hljs-regexp">//</span>清楚屏幕信息<br><span class="hljs-number">2</span>)echo xx  <span class="hljs-regexp">//</span>显示文本  x=<span class="hljs-number">0</span>  echo <span class="hljs-variable">$x</span> . echo -e \<span class="hljs-variable">$x</span> . echo $(pwd)<br><span class="hljs-number">3</span>)date  <span class="hljs-regexp">//</span>显示日期和时间（+%y 年  +%m 月  +%d日）<br><span class="hljs-number">4</span>)cal  <span class="hljs-regexp">//</span>显示当前日期  cal -y<br><span class="hljs-number">5</span>)ps  <span class="hljs-regexp">//</span>查看当前进程  -A(所有)  U  lilei (用户lilei)<br><span class="hljs-number">6</span>)kill -<span class="hljs-number">9</span> <span class="hljs-number">2315</span>  <span class="hljs-regexp">//</span>终止某一进程  <br><span class="hljs-number">7</span>)ps -ef | grep Jincheng<br><span class="hljs-number">8</span>)pkill Jincheng<br><span class="hljs-number">9</span>)killall Jincheng<br><span class="hljs-number">10</span>)last  <span class="hljs-regexp">//</span>显示最近登录系统的用户信息-<span class="hljs-number">6</span>列<br><span class="hljs-number">11</span>)history （<span class="hljs-number">10</span>） <span class="hljs-regexp">//</span>显示历史指令-默认<span class="hljs-number">1000</span>行<br><span class="hljs-number">12</span>)sudo adduser lilei sudo  <span class="hljs-regexp">//</span>给普通用户赋予root权限<br><span class="hljs-number">13</span>)sudo usermod -G sudo lilei  <span class="hljs-regexp">//</span>同上<br><span class="hljs-number">14</span>)alias l=’ls’  <span class="hljs-regexp">//</span>定义命令别名<br><span class="hljs-number">15</span>)unalias l  <span class="hljs-regexp">//</span>删除别名<br><span class="hljs-number">16</span>)alias  <span class="hljs-regexp">//</span>列出别名<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Liunx</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Docker中镜像相关操作</title>
    <link href="/itsqh.github.io/2022/09/02/Docker%E4%B8%AD%E9%95%9C%E5%83%8F%E7%9B%B8%E5%85%B3%E6%93%8D%E4%BD%9C/"/>
    <url>/itsqh.github.io/2022/09/02/Docker%E4%B8%AD%E9%95%9C%E5%83%8F%E7%9B%B8%E5%85%B3%E6%93%8D%E4%BD%9C/</url>
    
    <content type="html"><![CDATA[<h5 id="镜像查看"><a href="#镜像查看" class="headerlink" title="镜像查看"></a>镜像查看</h5><ul><li><p>查看当前本地仓库中有那些镜像   </p><p><code>docker image ls</code>  |  <code>docker images</code></p></li></ul><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">[root@localhost Docker]<span class="hljs-comment"># docker image ls</span><br>REPOSITORY           <span class="hljs-keyword">TAG</span>       <span class="hljs-title">IMAGE</span> ID       CREATED         SIZE<br>tomcat               <span class="hljs-number">8.5</span>       <span class="hljs-number">2</span>d2bccf89f53   <span class="hljs-number">8</span> months ago    <span class="hljs-number">678M</span>B<br></code></pre></td></tr></table></figure><p>结果解析：</p><blockquote><p>REPOSITORY ：镜像名称</p><p>TAG：版本</p><p>IMAGE ID：镜像id      </p><p> CREATED：创建时间        </p><p>SIZE：大小</p></blockquote><h5 id="镜像下载"><a href="#镜像下载" class="headerlink" title="镜像下载"></a>镜像下载</h5><p><code>docker pull &lt;镜像名称&gt;</code></p><ul><li><p>获取最新版本:</p><p><code>docker pull redis</code>  |  <code>docker pull redis:latest</code></p></li><li><p>获取指定版本： </p><p><code>docker pull redis:9.0</code></p></li></ul><h5 id="镜像搜索"><a href="#镜像搜索" class="headerlink" title="镜像搜索"></a>镜像搜索</h5><p><code>docker search &lt;镜像名&gt;</code></p><ul><li><p>搜索redis镜像：</p><p><code>docker search redie</code></p></li></ul><h5 id="删除镜像"><a href="#删除镜像" class="headerlink" title="删除镜像"></a>删除镜像</h5><p><code>docker image rm &lt;镜像名&gt;:&lt;版本号&gt;</code>  |  <code>docker image rm &lt;镜像id&gt;</code></p><ul><li><p>删除版本为 <strong>latest</strong> 的 <strong>hello-world</strong> 的镜像</p><p><code>docker image rm hello-world:latest</code></p><blockquote><p>必须是没有运行过的镜像</p></blockquote></li><li><p>强制删除：</p><p><code>docker image rm -f hello-world:latest</code></p></li><li><p>直接删除所有镜像</p><p><code>docker rmi  $(docker images -q)</code></p></li><li><p>批量删除tomcat镜像：</p></li></ul><p>​<code>docker image rm -f $(docker images tomcat -q)</code></p><h5 id="辅助命令"><a href="#辅助命令" class="headerlink" title="辅助命令"></a>辅助命令</h5><ul><li><p>启动docker</p><p><code>sudo service docker start</code></p></li><li><p>设置开机自启</p><p><code>sudo chkconfig docker on</code></p></li><li><p>查看docker客户端引擎 和 服务端引擎版本信息</p><p><code>docker version</code> </p></li><li><p>用来查看docker 引擎和服务端引擎的详细信息</p><p><code>docker info</code></p></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>Docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Typora常用命令</title>
    <link href="/itsqh.github.io/2022/08/29/Typora%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <url>/itsqh.github.io/2022/08/29/Typora%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<h2 id="1-目录："><a href="#1-目录：" class="headerlink" title="1.目录："></a>1.目录：</h2><p>每个 md 文件的开头都可以直接输入，当文档记录很多时，方便查看</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">输入 [toc] 回车，即可看到整个内容所用的标题，按照标题级别显示<br></code></pre></td></tr></table></figure><p><img src="https://pic1.zhimg.com/80/v2-ac47d457a59da552fe5aae44b3be925c_720w.jpg" alt="img"></p><h2 id="2-标题："><a href="#2-标题：" class="headerlink" title="2.标题："></a>2.标题：</h2><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs text">输入 #+空格+标题名称 回车或者光标离开。记住一定要有空格。<br>我刚开始没加空格，还以为我的typora不能用呢。###### 最多支持六级标题，如下图<br></code></pre></td></tr></table></figure><p><img src="https://pic2.zhimg.com/80/v2-990c26d7311236f6487dc493a9890719_720w.jpg" alt="img"></p><h2 id="3-代码块："><a href="#3-代码块：" class="headerlink" title="3.代码块："></a>3.代码块：</h2><p>作为一名工程师，代码块这种格式太好用了</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs text">输入 三个波浪号 ～～～ 或者 三个反引号 ``` ，回车。<br>记得修改 markdown 配置，然后重启 typora。可以显示行号<br></code></pre></td></tr></table></figure><p><img src="https://pic3.zhimg.com/80/v2-555f8b9ff2e20aea4244413041ff6366_720w.jpg" alt="img"></p><h2 id="4-引用块："><a href="#4-引用块：" class="headerlink" title="4.引用块："></a>4.引用块：</h2><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">输入 &gt; ,回车即可<br></code></pre></td></tr></table></figure><p><img src="https://pic3.zhimg.com/80/v2-31742296f4cfd8140f45e107d841b7da_720w.jpg" alt="img"></p><h2 id="5-分割线："><a href="#5-分割线：" class="headerlink" title="5.分割线："></a>5.分割线：</h2><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">输入 *** 或者 --- ，回车<br></code></pre></td></tr></table></figure><h2 id="6-清单列表："><a href="#6-清单列表：" class="headerlink" title="6.清单列表："></a>6.清单列表：</h2><p>这个也很赞。</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs text">输入 &quot;1&quot;+&quot;.&quot;+&quot;空格&quot; ，自动生成有序列表<br>输入 &quot;-&quot; 或 &quot;+&quot; 或 &quot;*&quot;， +&quot;空格&quot; ，自动生成无序列表<br><br>还可以在列表基础上，添加清单功能<br>输入 - [ ] ,注意每个符号之间都有空格<br></code></pre></td></tr></table></figure><p><img src="https://pic1.zhimg.com/80/v2-f568c5925f404e1dd213a53470394e88_720w.jpg" alt="img"></p><h2 id="7-字体："><a href="#7-字体：" class="headerlink" title="7.字体："></a>7.字体：</h2><p>一般来说很少对字体有太多要求，不过还是顺带提一下常用的。</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs text">**加粗内容** ，前后两个星号<br>~~删除线~~，前后两个波浪线<br>*斜体*，前后一个星号<br>&lt;u&gt;下划线&lt;/u&gt;，html 代码了都<br></code></pre></td></tr></table></figure><h2 id="8-插入表格："><a href="#8-插入表格：" class="headerlink" title="8.插入表格："></a>8.插入表格：</h2><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">|标题1|标题2| ，然后回车，再根据需要添加行列<br></code></pre></td></tr></table></figure><p><img src="https://pic1.zhimg.com/80/v2-4ba31512bde0b6436a061b59010b7314_720w.png" alt="img"></p><h2 id="9-彩蛋"><a href="#9-彩蛋" class="headerlink" title="9.彩蛋"></a>9.彩蛋</h2><p>表情包：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">输入 :smile ，就可以看到很多表情<br></code></pre></td></tr></table></figure><p><img src="https://pic1.zhimg.com/80/v2-ca730e493e981b8c8639cec6743e3658_720w.jpg" alt="img"></p><hr><p>你会发现，总结了这么些，在知乎的编辑栏中，已经把最常用的列出来了。</p><p><img src="https://pic1.zhimg.com/80/v2-4ee5062449f2c17db06515b698b89ebc_720w.png" alt="img"></p><p>我最喜欢用的就是引用和代码块。</p><hr><p>为什么说 Typora 这么好用，这么多人喜欢用。</p><p>我觉得这个逻辑跟使用 Mac 是一样的，它无形中对使用方提出了很多要求，你要记住很多命令才能很顺手，一旦顺手就很容易沉浸在里面。</p><p>所以 Typora 不是给用户提供了多么方便简单的使用方式，而是提高了对用户的要求，逼着用户去学习一些稍微有点困难的命令，然后再去更好的使用工具。</p><blockquote><p>原文链接：<a href="https://zhuanlan.zhihu.com/p/156954520">https://zhuanlan.zhihu.com/p/156954520</a></p></blockquote>]]></content>
    
    
    
    <tags>
      
      <tag>Typora</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo常用命令</title>
    <link href="/itsqh.github.io/2022/08/29/Hexo%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <url>/itsqh.github.io/2022/08/29/Hexo%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<h2 id="init"><a href="#init" class="headerlink" title="init"></a>init</h2><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crystal"><span class="hljs-variable">$ </span>hexo init [folder]<br></code></pre></td></tr></table></figure><p>新建一个网站。如果没有设置 <code>folder</code> ，Hexo 默认在目前的文件夹建立网站。</p><p>This command is a shortcut that runs the following steps:</p><ol><li>Git clone <a href="https://github.com/hexojs/hexo-starter">hexo-starter</a> including <a href="https://github.com/hexojs/hexo-theme-landscape">hexo-theme-landscape</a> into the current directory or a target folder if specified.</li><li>Install dependencies using a package manager: <a href="https://classic.yarnpkg.com/lang/en/">Yarn 1</a>, <a href="https://pnpm.js.org/">pnpm</a> or <a href="https://docs.npmjs.com/cli/install">npm</a>, whichever is installed; if there are more than one installed, the priority is as listed. npm is bundled with <a href="https://hexo.bootcss.com/docs/#Install-Node-js">Node.js</a> by default.</li></ol><h2 id="new"><a href="#new" class="headerlink" title="new"></a>new</h2><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gauss">$ hexo <span class="hljs-keyword">new</span> [layout] &lt;<span class="hljs-built_in">title</span>&gt;<br></code></pre></td></tr></table></figure><p>新建一篇文章。如果没有设置 <code>layout</code> 的话，默认使用 <a href="https://hexo.bootcss.com/docs/configuration.html">_config.yml</a> 中的 <code>default_layout</code> 参数代替。如果标题包含空格的话，请使用引号括起来。</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs actionscript">$ hexo <span class="hljs-keyword">new</span> <span class="hljs-string">&quot;post title with whitespace&quot;</span><br></code></pre></td></tr></table></figure><table><thead><tr><th align="left">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><code>-p</code>, <code>--path</code></td><td align="left">自定义新文章的路径</td></tr><tr><td align="left"><code>-r</code>, <code>--replace</code></td><td align="left">如果存在同名文章，将其替换</td></tr><tr><td align="left"><code>-s</code>, <code>--slug</code></td><td align="left">文章的 Slug，作为新文章的文件名和发布后的 URL</td></tr></tbody></table><p>默认情况下，Hexo 会使用文章的标题来决定文章文件的路径。对于独立页面来说，Hexo 会创建一个以标题为名字的目录，并在目录中放置一个 <code>index.md</code> 文件。你可以使用 <code>--path</code> 参数来覆盖上述行为、自行决定文件的目录：</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs haxe">hexo <span class="hljs-keyword">new</span> <span class="hljs-type">page</span> --path about/me <span class="hljs-string">&quot;About me&quot;</span><br></code></pre></td></tr></table></figure><p>以上命令会创建一个 <code>source/about/me.md</code> 文件，同时 Front Matter 中的 title 为 <code>&quot;About me&quot;</code></p><p>注意！title 是必须指定的！如果你这么做并不能达到你的目的：</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">hexo <span class="hljs-keyword">new</span> page <span class="hljs-comment">--path about/me</span><br></code></pre></td></tr></table></figure><p>此时 Hexo 会创建 <code>source/_posts/about/me.md</code>，同时 <code>me.md</code> 的 Front Matter 中的 title 为 <code>&quot;page&quot;</code>。这是因为在上述命令中，hexo-cli 将 <code>page</code> 视为指定文章的标题、并采用默认的 <code>layout</code>。</p><h2 id="generate"><a href="#generate" class="headerlink" title="generate"></a>generate</h2><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs verilog">$ hexo <span class="hljs-keyword">generate</span><br></code></pre></td></tr></table></figure><p>生成静态文件。</p><table><thead><tr><th align="left">选项</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><code>-d</code>, <code>--deploy</code></td><td align="left">文件生成后立即部署网站</td></tr><tr><td align="left"><code>-w</code>, <code>--watch</code></td><td align="left">监视文件变动</td></tr><tr><td align="left"><code>-b</code>, <code>--bail</code></td><td align="left">生成过程中如果发生任何未处理的异常则抛出异常</td></tr><tr><td align="left"><code>-f</code>, <code>--force</code></td><td align="left">强制重新生成文件 Hexo 引入了差分机制，如果 <code>public</code> 目录存在，那么 <code>hexo g</code> 只会重新生成改动的文件。 使用该参数的效果接近 <code>hexo clean &amp;&amp; hexo generate</code></td></tr><tr><td align="left"><code>-c</code>, <code>--concurrency</code></td><td align="left">最大同时生成文件的数量，默认无限制</td></tr></tbody></table><p>该命令可以简写为</p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crystal"><span class="hljs-variable">$ </span>hexo g<br></code></pre></td></tr></table></figure><h2 id="publish"><a href="#publish" class="headerlink" title="publish"></a>publish</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">$ hexo publish [layout] <span class="hljs-tag">&lt;<span class="hljs-name">filename</span>&gt;</span><br></code></pre></td></tr></table></figure><p>发表草稿。</p><h2 id="server"><a href="#server" class="headerlink" title="server"></a>server</h2><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs axapta">$ hexo <span class="hljs-keyword">server</span><br></code></pre></td></tr></table></figure><p>启动服务器。默认情况下，访问网址为： <code>http://localhost:4000/</code>。</p><table><thead><tr><th align="left">选项</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><code>-p</code>, <code>--port</code></td><td align="left">重设端口</td></tr><tr><td align="left"><code>-s</code>, <code>--static</code></td><td align="left">只使用静态文件</td></tr><tr><td align="left"><code>-l</code>, <code>--log</code></td><td align="left">启动日记记录，使用覆盖记录格式</td></tr></tbody></table><h2 id="deploy"><a href="#deploy" class="headerlink" title="deploy"></a>deploy</h2><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crystal"><span class="hljs-variable">$ </span>hexo deploy<br></code></pre></td></tr></table></figure><p>部署网站。</p><table><thead><tr><th align="left">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><code>-g</code>, <code>--generate</code></td><td align="left">部署之前预先生成静态文件</td></tr></tbody></table><p>该命令可以简写为：</p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crystal"><span class="hljs-variable">$ </span>hexo d<br></code></pre></td></tr></table></figure><h2 id="render"><a href="#render" class="headerlink" title="render"></a>render</h2><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs prolog">$ hexo render &lt;file1&gt; [file2] ...<br></code></pre></td></tr></table></figure><p>渲染文件。</p><table><thead><tr><th align="left">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><code>-o</code>, <code>--output</code></td><td align="left">设置输出路径</td></tr></tbody></table><h2 id="migrate"><a href="#migrate" class="headerlink" title="migrate"></a>migrate</h2><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crystal"><span class="hljs-variable">$ </span>hexo migrate &lt;<span class="hljs-keyword">type</span>&gt;<br></code></pre></td></tr></table></figure><p>从其他博客系统 <a href="https://hexo.bootcss.com/docs/migration.html">迁移内容</a>。</p><h2 id="clean"><a href="#clean" class="headerlink" title="clean"></a>clean</h2><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crystal"><span class="hljs-variable">$ </span>hexo clean<br></code></pre></td></tr></table></figure><p>清除缓存文件 (<code>db.json</code>) 和已生成的静态文件 (<code>public</code>)。</p><p>在某些情况（尤其是更换主题后），如果发现您对站点的更改无论如何也不生效，您可能需要运行该命令。</p><h2 id="list"><a href="#list" class="headerlink" title="list"></a>list</h2><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crystal"><span class="hljs-variable">$ </span>hexo list &lt;<span class="hljs-keyword">type</span>&gt;<br></code></pre></td></tr></table></figure><p>列出网站资料。</p><h2 id="version"><a href="#version" class="headerlink" title="version"></a>version</h2><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript">$ hexo <span class="hljs-built_in">version</span><br></code></pre></td></tr></table></figure><p>显示 Hexo 版本。</p><h2 id="选项"><a href="#选项" class="headerlink" title="选项"></a>选项</h2><h3 id="安全模式"><a href="#安全模式" class="headerlink" title="安全模式"></a>安全模式</h3><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">$ hexo <span class="hljs-comment">--safe</span><br></code></pre></td></tr></table></figure><p>在安全模式下，不会载入插件和脚本。当您在安装新插件遭遇问题时，可以尝试以安全模式重新执行。</p><h3 id="调试模式"><a href="#调试模式" class="headerlink" title="调试模式"></a>调试模式</h3><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">$ hexo <span class="hljs-comment">--debug</span><br></code></pre></td></tr></table></figure><p>在终端中显示调试信息并记录到 <code>debug.log</code>。当您碰到问题时，可以尝试用调试模式重新执行一次，并 <a href="https://github.com/hexojs/hexo/issues/new">提交调试信息到 GitHub</a>。</p><h3 id="简洁模式"><a href="#简洁模式" class="headerlink" title="简洁模式"></a>简洁模式</h3><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">$ hexo <span class="hljs-comment">--silent</span><br></code></pre></td></tr></table></figure><p>隐藏终端信息。</p><h3 id="自定义配置文件的路径"><a href="#自定义配置文件的路径" class="headerlink" title="自定义配置文件的路径"></a>自定义配置文件的路径</h3><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs verilog"># 使用 custom<span class="hljs-variable">.yml</span> 代替默认的 _config<span class="hljs-variable">.yml</span><br>$ hexo server --<span class="hljs-keyword">config</span> custom<span class="hljs-variable">.yml</span><br><br># 使用 custom<span class="hljs-variable">.yml</span> 和 custom2<span class="hljs-variable">.json</span>，其中 custom2<span class="hljs-variable">.json</span> 优先级更高<br>$ hexo <span class="hljs-keyword">generate</span> --<span class="hljs-keyword">config</span> custom<span class="hljs-variable">.yml</span>,custom2<span class="hljs-variable">.json</span>,custom3<span class="hljs-variable">.yml</span><br></code></pre></td></tr></table></figure><p>自定义配置文件的路径，指定这个参数后将不再使用默认的 <code>_config.yml</code>。<br>你可以使用一个 YAML 或 JSON 文件的路径，也可以使用逗号分隔（无空格）的多个 YAML 或 JSON 文件的路径。例如：</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs verilog"># 使用 custom<span class="hljs-variable">.yml</span> 代替默认的 _config<span class="hljs-variable">.yml</span><br>$ hexo server --<span class="hljs-keyword">config</span> custom<span class="hljs-variable">.yml</span><br><br># 使用 custom<span class="hljs-variable">.yml</span>, custom2<span class="hljs-variable">.json</span> 和 custom3<span class="hljs-variable">.yml</span>，其中 custom3<span class="hljs-variable">.yml</span> 优先级最高，其次是 custom2<span class="hljs-variable">.json</span><br>$ hexo <span class="hljs-keyword">generate</span> --<span class="hljs-keyword">config</span> custom<span class="hljs-variable">.yml</span>,custom2<span class="hljs-variable">.json</span>,custom3<span class="hljs-variable">.yml</span><br></code></pre></td></tr></table></figure><p>当你指定了多个配置文件以后，Hexo 会按顺序将这部分配置文件合并成一个 <code>_multiconfig.yml</code>。如果遇到重复的配置，排在后面的文件的配置会覆盖排在前面的文件的配置。这个原则适用于任意数量、任意深度的 YAML 和 JSON 文件。</p><h3 id="显示草稿"><a href="#显示草稿" class="headerlink" title="显示草稿"></a>显示草稿</h3><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">$ hexo <span class="hljs-comment">--draft</span><br></code></pre></td></tr></table></figure><p>显示 <code>source/_drafts</code> 文件夹中的草稿文章。</p><h3 id="自定义-CWD"><a href="#自定义-CWD" class="headerlink" title="自定义 CWD"></a>自定义 CWD</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">$ hexo --cwd <span class="hljs-regexp">/path/</span>to/cwd<br></code></pre></td></tr></table></figure><p>自定义当前工作目录（Current working directory）的路径。</p>]]></content>
    
    
    
    <tags>
      
      <tag>Hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java中创建线程的方式</title>
    <link href="/itsqh.github.io/2022/08/13/Java%E4%B8%AD%E5%88%9B%E5%BB%BA%E7%BA%BF%E7%A8%8B%E7%9A%84%E6%96%B9%E5%BC%8F/"/>
    <url>/itsqh.github.io/2022/08/13/Java%E4%B8%AD%E5%88%9B%E5%BB%BA%E7%BA%BF%E7%A8%8B%E7%9A%84%E6%96%B9%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="一、Java中创建线程主要有三种方式"><a href="#一、Java中创建线程主要有三种方式" class="headerlink" title="一、Java中创建线程主要有三种方式"></a>一、Java中创建线程主要有三种方式</h1><h3 id="1、继承Thread类创建线程类"><a href="#1、继承Thread类创建线程类" class="headerlink" title="1、继承Thread类创建线程类"></a>1、继承Thread类创建线程类</h3><ul><li>定义Thread类的子类，并重写该类的run方法，该run方法的方法体就代表了线程要完成的任务。因此把run()方法称为执行体。</li><li>创建Thread子类的实例，即创建了线程对象。</li><li>调用线程对象的start()方法来启动该线程。</li></ul><p>示例代码为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.sqh.thread;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyThread</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span> &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100</span>; i++) &#123;<br>            System.out.println(<span class="hljs-built_in">this</span>.getName() + <span class="hljs-string">&quot;  &quot;</span> + i);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyThread</span>().start();<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyThread</span>().start();<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2、通过Runnable接口创建线程类"><a href="#2、通过Runnable接口创建线程类" class="headerlink" title="2、通过Runnable接口创建线程类"></a>2、通过Runnable接口创建线程类</h3><ul><li>定义Runnable接口的实现类，并重写该接口的run()方法，该run()方法的方法体同样是该线程的线程执行体。</li><li>创建Runnable实现类的实例，并以此实例作为Thread的target来创建Thread对象，该Thread对象才是真正的线程对象。</li><li>调用线程对象的start()方法来启动该线程。</li></ul><p>示例代码为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.sqh.thread;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyRunnable</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100</span>; i++) &#123;<br>            System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;  &quot;</span> + i);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">MyRunnable</span> <span class="hljs-variable">myRunnable</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyRunnable</span>();<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(myRunnable).start();<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(myRunnable).start();<br><br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><p>线程的执行流程很简单，当执行代码start()时，就会执行对象中重写的run()方法，该方法执行完成后，线程就消亡了。</p><h3 id="3、通过Callable和Future创建线程"><a href="#3、通过Callable和Future创建线程" class="headerlink" title="3、通过Callable和Future创建线程"></a>3、通过Callable和Future创建线程</h3><p>（1）创建Callable接口的实现类，并实现call()方法，该call()方法将作为线程执行体，并且有返回值。</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs aspectj"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Callable</span> </span>&#123;<br>    <span class="hljs-function">V <span class="hljs-title">call</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>（2）创建Callable实现类的实例，使用FutureTask类来包装Callable对象，该FutureTask对象封装了该Callable对象的call()方法的返回值。（FutureTask是一个包装器，它通过接受Callable来创建，它同时实现了Future和Runnable接口。）</p><p>（3）使用FutureTask对象作为Thread对象的target创建并启动新线程。</p><p>（4）调用FutureTask对象的get()方法来获得子线程执行结束后的返回值。</p><p>实例代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.sqh.thread;<br><br><span class="hljs-keyword">import</span> java.util.concurrent.Callable;<br><span class="hljs-keyword">import</span> java.util.concurrent.FutureTask;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyCallable</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Callable</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">call</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-keyword">return</span> Thread.currentThread().getName();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">MyCallable</span> <span class="hljs-variable">myCallable</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyCallable</span>();<br>        FutureTask&lt;String&gt; ft = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FutureTask</span>&lt;&gt;(myCallable);<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(ft).start();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> ft.get();<br>        System.out.println(<span class="hljs-string">&quot;子线程的返回值：&quot;</span> + str);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="二、创建线程的三种方式的对比"><a href="#二、创建线程的三种方式的对比" class="headerlink" title="二、创建线程的三种方式的对比"></a>二、创建线程的三种方式的对比</h2><h3 id="1、采用实现Runnable、Callable接口的方式创建多线程时"><a href="#1、采用实现Runnable、Callable接口的方式创建多线程时" class="headerlink" title="1、采用实现Runnable、Callable接口的方式创建多线程时"></a>1、采用实现Runnable、Callable接口的方式创建多线程时</h3><p><strong>优势是：</strong></p><p>线程类只是实现了Runnable接口或Callable接口，还可以继承其他类。</p><p>在这种方式下，多个线程可以共享同一个target对象，所以非常适合多个相同线程来处理同一份资源的情况，从而可以将CPU、代码和数据分开，形成清晰的模型，较好地体现了面向对象的思想。</p><p><strong>劣势是：</strong></p><p>编程稍微复杂，如果要访问当前线程，则必须使用Thread.currentThread()方法。</p><h3 id="2、使用继承Thread类的方式创建多线程时"><a href="#2、使用继承Thread类的方式创建多线程时" class="headerlink" title="2、使用继承Thread类的方式创建多线程时"></a>2、使用继承Thread类的方式创建多线程时</h3><p><strong>优势是：</strong></p><p>编写简单，如果需要访问当前线程，则无需使用Thread.currentThread()方法，直接使用this即可获得当前线程。</p><p><strong>劣势是：</strong></p><p>线程类已经继承了Thread类，所以不能再继承其他父类。</p><h3 id="3、Runnable和Callable的区别"><a href="#3、Runnable和Callable的区别" class="headerlink" title="3、Runnable和Callable的区别"></a>3、Runnable和Callable的区别</h3><p>(1) Callable规定（重写）的方法是call()，Runnable规定（重写）的方法是run()。</p><p>(2) Callable的任务执行后可返回值，而Runnable的任务是不能返回值的。</p><p>(3) call方法可以抛出异常，run方法不可以。</p><p>(4) 运行Callable任务可以拿到一个Future对象，表示异步计算的结果。它提供了检查计算是否完成的方法，以等待计算的完成，并检索计算的结果。通过Future对象可以了解任务执行情况，可取消任务的执行，还可获取执行结果。</p><blockquote><h5 id="参考资料：https-segmentfault-com-a-1190000022878543"><a href="#参考资料：https-segmentfault-com-a-1190000022878543" class="headerlink" title="参考资料：https://segmentfault.com/a/1190000022878543"></a>参考资料：<a href="https://segmentfault.com/a/1190000022878543">https://segmentfault.com/a/1190000022878543</a></h5></blockquote>]]></content>
    
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>多线程</tag>
      
      <tag>并发</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
