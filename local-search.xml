<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Docker中安装软件</title>
    <link href="/itsqh.github.io/2024/02/28/Docker%E4%B8%AD%E5%AE%89%E8%A3%85%E8%BD%AF%E4%BB%B6/"/>
    <url>/itsqh.github.io/2024/02/28/Docker%E4%B8%AD%E5%AE%89%E8%A3%85%E8%BD%AF%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<h2 id="在Ubuntu上安装Docker有以下几个步骤："><a href="#在Ubuntu上安装Docker有以下几个步骤：" class="headerlink" title="在Ubuntu上安装Docker有以下几个步骤："></a>在Ubuntu上安装Docker有以下几个步骤：</h2><ol><li>更新apt包管理器：</li></ol><p>sudo apt-get update</p><ol><li>安装Docker依赖包：</li></ol><p>sudo apt-get install apt-transport-https ca-certificates curl software-properties-common</p><ol><li>添加Docker的官方GPG密钥：</li></ol><p>curl -fsSL <a href="https://download.docker.com/linux/ubuntu/gpg">https://download.docker.com/linux/ubuntu/gpg</a> | sudo apt-key add -</p><ol><li>设置稳定版的Docker仓库：</li></ol><p>sudo add-apt-repository “deb [arch&#x3D;amd64] <a href="https://download.docker.com/linux/ubuntu">https://download.docker.com/linux/ubuntu</a> $(lsb_release -cs) stable”</p><ol><li>再次更新apt包管理器：</li></ol><p>sudo apt-get update</p><ol><li>安装Docker：</li></ol><p>sudo apt-get install docker-ce</p><ol><li>启动Docker并设置开机自启：</li></ol><p>sudo systemctl start docker</p><p>sudo systemctl enable docker</p><p>通过运行以下命令来检查Docker是否成功安装并运行：</p><p>sudo docker run hello-world</p><h2 id="Docker常用命令"><a href="#Docker常用命令" class="headerlink" title="Docker常用命令"></a>Docker常用命令</h2><h4 id="案例一：启动nginx，绑定80到连接本地的8080端口"><a href="#案例一：启动nginx，绑定80到连接本地的8080端口" class="headerlink" title="案例一：启动nginx，绑定80到连接本地的8080端口"></a>案例一：启动nginx，绑定80到连接本地的8080端口</h4><p>docker run -p 8080:80 -d nginx<br>-d:后台运行，</p><h4 id="案例二：-启动ubuntu"><a href="#案例二：-启动ubuntu" class="headerlink" title="案例二： 启动ubuntu"></a>案例二： 启动ubuntu</h4><p>docker run ubuntu echo hello world<br>自动下载ubuntu ，并启动</p><h4 id="案例三：替换docker-中文件"><a href="#案例三：替换docker-中文件" class="headerlink" title="案例三：替换docker 中文件"></a>案例三：替换docker 中文件</h4><p>docker cp index.html containerId:&#x2F;&#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html</p><h4 id="案例四：保存docker"><a href="#案例四：保存docker" class="headerlink" title="案例四：保存docker"></a>案例四：保存docker</h4><p>docker commit -m “message” containerId<br>保存为一个新的image</p><h4 id="案例五：dockerfile-文件创建docker-image"><a href="#案例五：dockerfile-文件创建docker-image" class="headerlink" title="案例五：dockerfile 文件创建docker image"></a>案例五：dockerfile 文件创建docker image</h4><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-keyword">FROM</span> ubuntu   <br>MAINTAINER wsn<br><span class="hljs-built_in">RUN</span> apt-<span class="hljs-built_in">get</span> update<br><span class="hljs-built_in">RUN</span> apt-<span class="hljs-built_in">get</span> install -y nginx<br>copy index.html /var/www/html<br>ENTRYPOINT [<span class="hljs-string">&quot;/usr/sbin/nginx&quot;</span>,<span class="hljs-string">&quot;-g&quot;</span>,<span class="hljs-string">&quot;daemon off;&quot;</span>]<br>EXPOSE 80<br></code></pre></td></tr></table></figure><p>当前目录下运行命令 docker build -t wsn&#x2F;ubuntu-nginx .<br>wsn&#x2F;ubuntu-nginx 作为容器的名字</p><h4 id="案例六：docker分层"><a href="#案例六：docker分层" class="headerlink" title="案例六：docker分层"></a>案例六：docker分层</h4><h4 id="案例七：volumn-持久化"><a href="#案例七：volumn-持久化" class="headerlink" title="案例七：volumn 持久化"></a>案例七：volumn 持久化</h4><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">docker run -p <span class="hljs-number">80</span>:<span class="hljs-number">80</span> -d -v <span class="hljs-variable">$PWD</span><span class="hljs-regexp">/html:/u</span>sr<span class="hljs-regexp">/share/</span>nginx/html nginx<br></code></pre></td></tr></table></figure><p>$PWD&#x2F;html 挂载虚拟机的&#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html目录下</p><h4 id="案例八：进入docker虚拟机shell，-it交互方法"><a href="#案例八：进入docker虚拟机shell，-it交互方法" class="headerlink" title="案例八：进入docker虚拟机shell，-it交互方法"></a>案例八：进入docker虚拟机shell，-it交互方法</h4><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">docker exec -it nginx  <span class="hljs-regexp">/bin/</span>bash<br></code></pre></td></tr></table></figure><h2 id="安装Minio"><a href="#安装Minio" class="headerlink" title="安装Minio"></a>安装Minio</h2><p>拉取镜像<br>docker pull minio&#x2F;minio</p><ul><li>创建data和config文件夹<br><code>mkdir -p /minio/data mkdir -p /minio/config</code></li><li>运行镜像<figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile">docker <span class="hljs-keyword">run</span><span class="language-bash"> -p 49000:49000 -p 49090:49090 --name minio \</span><br><span class="language-bash">-d --restart=always \</span><br><span class="language-bash">-e <span class="hljs-string">&quot;MINIO_ROOT_USER=admin&quot;</span> \</span><br><span class="language-bash">-e <span class="hljs-string">&quot;MINIO_ROOT_PASSWORD=adminminio&quot;</span> \</span><br><span class="language-bash">-v /home/crazysnow/Desktop/BasicServices/minio/data:/data \</span><br><span class="language-bash">-v /home/crazysnow/Desktop/BasicServices/minio/config:/root/.minio \</span><br><span class="language-bash">minio/minio server /data \</span><br><span class="language-bash">--console-address <span class="hljs-string">&quot;:49000&quot;</span> --address <span class="hljs-string">&quot;:49090&quot;</span></span><br></code></pre></td></tr></table></figure>上面的例子是这样工作的：<br>docker run启动 MinIO 容器。</li></ul><p>-p将本地端口绑定到容器端口。</p><p>-user将容器的用户名设置为当前用户和用户组的策略。</p><p>-name为容器创建一个名称。</p><p>-v将文件路径设置为容器要使用的持久卷位置。当 MinIO 将数据写入 时&#x2F;data，该数据实际上会写入本地路径~&#x2F;minio&#x2F;data，该数据可以在容器重新启动之间保留。您可以替换${HOME}&#x2F;minio&#x2F;data为用户主目录中用户具有读、写和删除访问权限的另一个位置。</p><p>-e分别设置环境变量MINIO_ROOT_USER和MINIO_ROOT_PASSWORD。这些设置root 用户凭据。更改用于您的容器的示例值。</p><h2 id="安装Kafka"><a href="#安装Kafka" class="headerlink" title="安装Kafka"></a>安装Kafka</h2><p>首先创建一个网络<br>app-tier：网络名称<br>–driver：网络类型为bridge</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">sudo docker network <span class="hljs-built_in">create</span> app-tier <span class="hljs-comment">--driver bridge</span><br></code></pre></td></tr></table></figure><h4 id="1、安装zookeeper"><a href="#1、安装zookeeper" class="headerlink" title="1、安装zookeeper"></a>1、安装zookeeper</h4><p><strong>Kafka</strong>依赖zookeeper所以先安装zookeeper<br><strong>-p</strong>：设置映射端口（默认2181）<br><strong>-d</strong>：后台启动</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">sudo docker <span class="hljs-built_in">run</span> -d --name zookeeper-server --network app-tier  --restart always   -e <span class="hljs-attribute">ALLOW_ANONYMOUS_LOGIN</span>=<span class="hljs-literal">yes</span> bitnami/zookeeper:latest<br></code></pre></td></tr></table></figure><p>查看zookeeper容器日志（可省略）</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">sudo docker logs -f zookeeper</span><br></code></pre></td></tr></table></figure><p>停止</p><figure class="highlight vbscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vbscript">sudo docker <span class="hljs-keyword">stop</span> zookeeper-<span class="hljs-built_in">server</span><br></code></pre></td></tr></table></figure><p>删除</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs axapta">sudo docker rm zookeeper-<span class="hljs-keyword">server</span><br></code></pre></td></tr></table></figure><h4 id="2、安装Kafka"><a href="#2、安装Kafka" class="headerlink" title="2、安装Kafka"></a>2、安装Kafka</h4><p>安装并运行Kafka，<br>–name：容器名称<br>-p：设置映射端口（默认9092 ）<br>-d：后台启动<br>ALLOW_PLAINTEXT_LISTENER任何人可以访问<br>KAFKA_CFG_ZOOKEEPER_CONNECT链接的zookeeper<br>KAFKA_ADVERTISED_HOST_NAME当前主机IP或地址（重点：如果是服务器部署则配服务器IP或域名否则客户端监听消息会报地址错误）<br>-e KAFKA_CFG_ADVERTISED_LISTENERS&#x3D;PLAINTEXT:&#x2F;&#x2F;192.168.0.101:9092 \</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">sudo docker run -d --name kafka-server  --network app-tier   -p <span class="hljs-number">9092</span>:<span class="hljs-number">9092</span> --restart always -v <span class="hljs-regexp">/home/</span>crazysnow<span class="hljs-regexp">/Desktop/</span>javaServer<span class="hljs-regexp">/docker/</span>config<span class="hljs-regexp">/kafka_server.properties:/</span>opt<span class="hljs-regexp">/kafka/</span>config<span class="hljs-regexp">/server.properties -e ALLOW_PLAINTEXT_LISTENER=yes   -e KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper-server:2181  -e KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT:/</span><span class="hljs-regexp">/192.168.1.100:9092 bitnami/</span>kafka:latest<br></code></pre></td></tr></table></figure><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">docker run -v <span class="hljs-regexp">/path/</span>to<span class="hljs-regexp">/kafka_server.properties:/</span>opt<span class="hljs-regexp">/kafka/</span>config/server.properties \<br>  --name my-kafka -d kafka<br></code></pre></td></tr></table></figure><p>查看kafka容器日志（可省略）</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">docker logs -f kafka</span><br></code></pre></td></tr></table></figure><p>停止kafka容器</p><figure class="highlight vbscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vbscript">sudo docker <span class="hljs-keyword">stop</span> kafka-<span class="hljs-built_in">server</span><br></code></pre></td></tr></table></figure><h4 id="3、kafka-manager图形化管理工具-不好用"><a href="#3、kafka-manager图形化管理工具-不好用" class="headerlink" title="3、kafka-manager图形化管理工具(不好用)"></a>3、kafka-manager图形化管理工具(不好用)</h4><p>kafka-manager 只是一个简单的页面，浏览kafka中的信息，没有实际操作功能。<br>-p：设置映射端口（默认9000）<br>–name：容器名称<br>-ZK_HOSTS：zookeeper服务地址，多个可用逗号隔开</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs livescript">docker run --name kafka-manager -d  <span class="hljs-string">\</span><br>    --network app-tier <span class="hljs-string">\</span><br>-p <span class="hljs-number">9000</span>:<span class="hljs-number">9000</span>  <span class="hljs-string">\</span><br>-e ZK_HOSTS=<span class="hljs-string">&quot;zookeeper-server:2181&quot;</span> <span class="hljs-string">\</span><br>sheepkiller/kafka-manager<br></code></pre></td></tr></table></figure><p>查看kafka-manager容器日志（可省略）</p><p>docker logs -f kafka-manager</p><p>通过浏览器访问主机地址，如果是服务器则注意要放开9000端口<br><a href="http://172.17.0.6:9000/">http://172.17.0.6:9000/</a></p><h4 id="4、kafka-map图形化管理工具-好用"><a href="#4、kafka-map图形化管理工具-好用" class="headerlink" title="4、kafka-map图形化管理工具(好用)"></a>4、kafka-map图形化管理工具(好用)</h4><p>图形化管理工具<br>访问地址：http:&#x2F;&#x2F;服务器IP:9001&#x2F;<br>DEFAULT_USERNAME：默认账号admin<br>DEFAULT_PASSWORD：默认密码admin</p><p>Git 地址：<a href="https://github.com/dushixiang/kafka-map/blob/master/README-zh_CN.md">https://github.com/dushixiang/kafka-map/blob/master/README-zh_CN.md</a></p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs livescript">sudo docker run -d --name kafka-<span class="hljs-keyword">map</span> <span class="hljs-string">\</span><br>    --network app-tier <span class="hljs-string">\</span><br>    -p <span class="hljs-number">9001</span>:<span class="hljs-number">8080</span> <span class="hljs-string">\</span><br>    -v /opt/kafka-<span class="hljs-keyword">map</span>/data:/usr/local/kafka-<span class="hljs-keyword">map</span>/data <span class="hljs-string">\</span><br>    -e DEFAULT_USERNAME=admin <span class="hljs-string">\</span><br>    -e DEFAULT_PASSWORD=admin <span class="hljs-string">\</span><br>    --restart always dushixiang/kafka-map:latest<br></code></pre></td></tr></table></figure><h2 id="安装MySQL"><a href="#安装MySQL" class="headerlink" title="安装MySQL"></a>安装MySQL</h2><p>指定版本号:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo docker pull mysql:5.7<br></code></pre></td></tr></table></figure><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs awk">sudo docker run -d -p <span class="hljs-number">3306</span>:<span class="hljs-number">3306</span> <br>-v <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/mysql/</span>conf:<span class="hljs-regexp">/etc/my</span>sql/conf.d <br>-v <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/mysql/</span>data:<span class="hljs-regexp">/var/</span>lib/mysql <br>-e MYSQL_ROOT_PASSWORD=root <br>--name mysql57 <br>--restart always mysql:<span class="hljs-number">5.7</span><br></code></pre></td></tr></table></figure><h5 id="下载MySQL8镜像"><a href="#下载MySQL8镜像" class="headerlink" title="下载MySQL8镜像"></a>下载MySQL8镜像</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">docker pull <span class="hljs-attr">mysql</span>:<span class="hljs-number">8.0</span><span class="hljs-number">.27</span><br></code></pre></td></tr></table></figure><h5 id="启动MySQL8测试容器"><a href="#启动MySQL8测试容器" class="headerlink" title="启动MySQL8测试容器"></a>启动MySQL8测试容器</h5><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">docker <span class="hljs-built_in">run</span> -itd --name mysqltest -p 3366:3306 <span class="hljs-attribute">--privileged</span>=<span class="hljs-literal">true</span> -e <span class="hljs-attribute">MYSQL_ROOT_PASSWORD</span>=root mysql:8.0.27  <span class="hljs-attribute">--lower_case_table_names</span>=1<br></code></pre></td></tr></table></figure><h5 id="建MySQL数据目录、配置文件目录"><a href="#建MySQL数据目录、配置文件目录" class="headerlink" title="建MySQL数据目录、配置文件目录"></a>建MySQL数据目录、配置文件目录</h5><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs awk"> mkdir -p <span class="hljs-regexp">/data/my</span>sql/&#123;config,data&#125;<br> pwd<br><span class="hljs-regexp">/data/my</span>sql/config<br> MySQL容器配置文件拷贝到宿主机<br> docker cp mysqltest:<span class="hljs-regexp">/etc/my</span>sql<span class="hljs-regexp">/my.cnf ./</span><br> docker rm mysqltest<br></code></pre></td></tr></table></figure><h5 id="启动MySQL8容器并挂载数据目录、配置文件"><a href="#启动MySQL8容器并挂载数据目录、配置文件" class="headerlink" title="启动MySQL8容器并挂载数据目录、配置文件"></a>启动MySQL8容器并挂载数据目录、配置文件</h5><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs gradle">docker run -itd --name mysql8 -p <span class="hljs-number">3307</span>:<span class="hljs-number">3306</span>  \<br>--privileged=<span class="hljs-keyword">true</span>  \<br>--restart=always  \<br>-v  <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/mysql8/</span>data:<span class="hljs-regexp">/var/</span>lib/mysql  \<br>-v <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/mysql8/</span>config<span class="hljs-regexp">/my.cnf:/</span>etc<span class="hljs-regexp">/mysql/my</span>.cnf  \<br>-e MYSQL_ROOT_PASSWORD=root  \<br>mysql:<span class="hljs-number">8.0</span>.<span class="hljs-number">27</span><br></code></pre></td></tr></table></figure><h2 id="安装Nginx"><a href="#安装Nginx" class="headerlink" title="安装Nginx"></a>安装Nginx</h2><p>Nginx 挂载到服务器的目录：</p><ul><li><code>/work/nginx/conf.d</code> 用于存放配置文件</li><li><code>/work/nginx/html</code> 用于存放网页文件</li><li><code>/work/nginx/logs</code> 用于存放日志</li><li><code>/work/nginx/cert</code> 用于存放 HTTPS 证书</li></ul><p>① 创建 <code>/work/nginx</code> 目录，并在该目录下新建 <code>nginx.conf</code> 文件，避免稍后安装 Nginx 报错。内容如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs bash">user  nginx;<br>worker_processes  1;<br><br>events &#123;<br>    worker_connections  1024;<br>&#125;<br><br>error_log  /var/log/nginx/error.log warn;<br>pid        /var/run/nginx.pid;<br><br>http &#123;<br>    include       /etc/nginx/mime.types;<br>    default_type  application/octet-stream;<br>    sendfile        on;<br>    keepalive_timeout  65;<br><br>    log_format  main  <span class="hljs-string">&#x27;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#x27;</span><br>                      <span class="hljs-string">&#x27;$status $body_bytes_sent &quot;$http_referer&quot; &#x27;</span><br>                      <span class="hljs-string">&#x27;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#x27;</span>;<br><span class="hljs-comment">#    access_log  /var/log/nginx/access.log  main;</span><br><br>    gzip on;<br>    gzip_min_length 1k;     <span class="hljs-comment"># 设置允许压缩的页面最小字节数</span><br>    gzip_buffers 4 16k;     <span class="hljs-comment"># 用来存储 gzip 的压缩结果</span><br>    gzip_http_version 1.1;  <span class="hljs-comment"># 识别 HTTP 协议版本</span><br>    gzip_comp_level 2;      <span class="hljs-comment"># 设置 gzip 的压缩比 1-9。1 压缩比最小但最快，而 9 相反</span><br>    gzip_types text/plain application/x-javascript text/css application/xml application/javascript; <span class="hljs-comment"># 指定压缩类型</span><br>    gzip_proxied any;       <span class="hljs-comment"># 无论后端服务器的 headers 头返回什么信息，都无条件启用压缩</span><br><br>    include /etc/nginx/conf.d/*.conf; <span class="hljs-comment">## 加载该目录下的其它 Nginx 配置文件</span><br>&#125;<br></code></pre></td></tr></table></figure><p>② 执行如下命令，使用 Docker 启动 Nginx 容器。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo docker run -d \<br>--name nginx --restart always \<br>-p 9876:80 -p 443:443 \<br>-e <span class="hljs-string">&quot;TZ=Asia/Shanghai&quot;</span> \<br>-v /usr/local/nginx/nginx.conf:/etc/nginx/nginx.conf \<br>-v /usr/local/nginx/conf.d:/etc/nginx/conf.d \<br>-v /usr/local/nginx/logs:/var/log/nginx \<br>-v /usr/local/nginx/cert:/etc/nginx/cert \<br>-v /usr/local/nginx/html:/usr/share/nginx/html \<br>nginx:alpine<br></code></pre></td></tr></table></figure><p>③ 执行 <code>docker ps</code> 命令，查看到 Nginx 容器的状态是 <code>UP</code> 的。</p><hr><p>下面，来看两种 Nginx 的配置，分别满足服务器 IP、独立域名的不同场景。</p><h3 id="6-2-方式一：服务器-IP-访问"><a href="#6-2-方式一：服务器-IP-访问" class="headerlink" title="#6.2 方式一：服务器 IP 访问"></a><a href="https://doc.iocoder.cn/deployment-docker/#_6-2-%E6%96%B9%E5%BC%8F%E4%B8%80-%E6%9C%8D%E5%8A%A1%E5%99%A8-ip-%E8%AE%BF%E9%97%AE">#</a>6.2 方式一：服务器 IP 访问</h3><p>① 在 <code>/work/nginx/conf.d</code> 目录下，创建 <code>ruoyi-vue-pro.conf</code>，内容如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs bash">server &#123;<br>    listen       80;<br>    server_name  139.9.196.247; <span class="hljs-comment">## 重要！！！修改成你的外网 IP/域名</span><br><br>    location / &#123; <span class="hljs-comment">## 前端项目</span><br>        root   /usr/share/nginx/html/yudao-admin-ui;<br>        index  index.html index.htm;<br>        try_files <span class="hljs-variable">$uri</span> <span class="hljs-variable">$uri</span>/ /index.html;<br>    &#125;<br><br>    location /admin-api/ &#123; <span class="hljs-comment">## 后端项目 - 管理后台</span><br>        proxy_pass http://192.168.0.213:48080/admin-api/; <span class="hljs-comment">## 重要！！！proxy_pass 需要设置为后端项目所在服务器的 IP</span><br>        proxy_set_header Host <span class="hljs-variable">$http_host</span>;<br>        proxy_set_header X-Real-IP <span class="hljs-variable">$remote_addr</span>;<br>        proxy_set_header REMOTE-HOST <span class="hljs-variable">$remote_addr</span>;<br>        proxy_set_header X-Forwarded-For <span class="hljs-variable">$proxy_add_x_forwarded_for</span>;<br>    &#125;<br><br>    location /app-api/ &#123; <span class="hljs-comment">## 后端项目 - 用户 App</span><br>        proxy_pass http://192.168.0.213:48080/app-api/; <span class="hljs-comment">## 重要！！！proxy_pass 需要设置为后端项目所在服务器的 IP</span><br>        proxy_set_header Host <span class="hljs-variable">$http_host</span>;<br>        proxy_set_header X-Real-IP <span class="hljs-variable">$remote_addr</span>;<br>        proxy_set_header REMOTE-HOST <span class="hljs-variable">$remote_addr</span>;<br>        proxy_set_header X-Forwarded-For <span class="hljs-variable">$proxy_add_x_forwarded_for</span>;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>友情提示：</p><p><code>[root]</code> 指令在本地文件时，要使用 Nginx Docker 容器内的路径，即 <code>/usr/share/nginx/html/yudao-admin-ui</code>，否则会报 404 的错误。</p><p>② 执行 <code>docker exec nginx nginx -s reload</code> 命令，重新加载 Nginx 配置。</p><p>友情提示：如果你担心 Nginx 配置不正确，可以执行 docker exec nginx nginx -t 命令。</p><p>③ 执行 <code>curl http://192.168.0.213/admin-api/</code> 命令，成功访问后端项目的内网地址，返回结果如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;code&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">401</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;data&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-literal"><span class="hljs-keyword">null</span></span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;msg&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;账号未登录&quot;</span><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>执行 <code>curl http://139.9.196.247:48080/admin-api/</code> 命令，成功访问后端项目的外网地址，返回结果一致。</p><p>④ 请求 <a href="http://139.9.196.247:48080/">http://139.9.196.247:48080 (opens new window)</a>地址，成功访问前端项目的外网地址，</p><h2 id="安装RocketMQ"><a href="#安装RocketMQ" class="headerlink" title="安装RocketMQ"></a>安装RocketMQ</h2><p><strong>docker search RocketMQ</strong>命令来查看可用版本</p><p>docker pull rocketmqinc&#x2F;rocketmq</p><h2 id="安装Redis"><a href="#安装Redis" class="headerlink" title="安装Redis"></a>安装Redis</h2><p><strong>docker search redis</strong> 命令来查看可用版本</p><h3 id="取最新版的-Redis-镜像"><a href="#取最新版的-Redis-镜像" class="headerlink" title="取最新版的 Redis 镜像"></a>取最新版的 Redis 镜像</h3><p>这里我们拉取官方的最新版本的镜像：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim">docker pull <span class="hljs-keyword">redi</span><span class="hljs-variable">s:latest</span><br></code></pre></td></tr></table></figure><h3 id="创建挂载目录"><a href="#创建挂载目录" class="headerlink" title="创建挂载目录"></a>创建挂载目录</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">mkdir <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/redis/</span>data<br></code></pre></td></tr></table></figure><h3 id="下载redis-conf文件"><a href="#下载redis-conf文件" class="headerlink" title="下载redis.conf文件"></a>下载redis.conf文件</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">wget http:<span class="hljs-regexp">//</span>download.redis.io<span class="hljs-regexp">/redis-stable/</span>redis.conf<br></code></pre></td></tr></table></figure><h3 id="权限"><a href="#权限" class="headerlink" title="权限"></a>权限</h3><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">chmod</span> <span class="hljs-number">777</span> redis.conf<br></code></pre></td></tr></table></figure><h3 id="修改默认配置信息"><a href="#修改默认配置信息" class="headerlink" title="修改默认配置信息"></a>修改默认配置信息</h3><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">vim</span> redis.<span class="hljs-keyword">conf</span><br></code></pre></td></tr></table></figure><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">bind</span> <span class="hljs-number">127.0.0.1</span> <span class="hljs-comment"># 这行要注释掉，解除本地连接限制</span><br>protected-mode <span class="hljs-literal">no</span> <span class="hljs-comment"># 默认yes，如果设置为yes，则只允许在本机的回环连接，其他机器无法连接。</span><br>daemonize <span class="hljs-literal">no</span> <span class="hljs-comment"># 默认no 为不守护进程模式，docker部署不需要改为yes，docker run -d本身就是后台启动，不然会冲突</span><br>requirepass <span class="hljs-number">123456</span> <span class="hljs-comment"># 设置密码</span><br>appendonly <span class="hljs-literal">yes</span> <span class="hljs-comment"># 持久化</span><br></code></pre></td></tr></table></figure><h3 id="docker启动redis-d"><a href="#docker启动redis-d" class="headerlink" title="docker启动redis -d"></a>docker启动redis -d</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs awk">sudo docker run --name redis-server \<br>-p <span class="hljs-number">6379</span>:<span class="hljs-number">6379</span> \<br>-v <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/redis/</span>redis.conf:<span class="hljs-regexp">/etc/</span>redis/redis.conf \<br>-v <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/redis/</span>data:/data \<br>--appendonly yes \<br>--restart always redis:latest<br></code></pre></td></tr></table></figure><p><strong>说明：</strong></p><ul><li>-p 6379:6379：端口映射，前面是宿主机，后面是容器。</li><li>–name redis：指定该容器名称。</li><li>-v 挂载文件或目录：前面是宿主机，后面是容器。</li><li>-d redis redis-server &#x2F;etc&#x2F;redis&#x2F;redis.conf：表示后台启动redis，以配置文件启动redis，加载容器内的conf文件。</li><li>appendonly yes：开启redis 持久化。</li></ul><p>上面的启动方式没有成功，修改成这种方式了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo docker run -d --name redis-server --restart=always -p 6379:6379 redis:5.0.14-alpine<br></code></pre></td></tr></table></figure><p>设置启动Docker时自启动Redis命令如下。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp">docker update redis-server --restart=always<br></code></pre></td></tr></table></figure><h3 id="查看本地镜像"><a href="#查看本地镜像" class="headerlink" title="查看本地镜像"></a>查看本地镜像</h3><p>使用以下命令来查看是否已安装了 redis：</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">docker images</span><br></code></pre></td></tr></table></figure><h3 id="运行容器"><a href="#运行容器" class="headerlink" title="运行容器"></a>运行容器</h3><p>安装完成后，我们可以使用以下命令来运行 redis 容器：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">sudo docker run <span class="hljs-attr">--name</span> redis-server -<span class="hljs-selector-tag">p</span> <span class="hljs-number">6379</span>:<span class="hljs-number">6379</span> redis <span class="hljs-attr">--restart</span> always redis:latest<br></code></pre></td></tr></table></figure><h2 id="安装JDK"><a href="#安装JDK" class="headerlink" title="安装JDK"></a>安装JDK</h2><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">tar -zxvf jdk-<span class="hljs-number">8</span>u341-linux-x64<span class="hljs-selector-class">.tar</span><span class="hljs-selector-class">.gz</span> <br></code></pre></td></tr></table></figure><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">vim <span class="hljs-regexp">/etc/</span>profile<br></code></pre></td></tr></table></figure><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk">export JAVA_HOME=<span class="hljs-regexp">/home/</span>crazysnow<span class="hljs-regexp">/Desktop/</span>java_app_docker<span class="hljs-regexp">/jdk/</span>jdk1.<span class="hljs-number">8.0</span>_371<br>export JRE_HOME=<span class="hljs-regexp">/home/</span>crazysnow<span class="hljs-regexp">/Desktop/</span>java_app_docker<span class="hljs-regexp">/jdk/</span>jdk1.<span class="hljs-number">8.0</span>_371/jre<br>export CLASS_PATH=.:<span class="hljs-variable">$JAVA_HOME</span><span class="hljs-regexp">/lib:$JRE_HOME/</span>lib <br>export PATH=<span class="hljs-variable">$PATH</span>:<span class="hljs-variable">$JAVA_HOME</span><span class="hljs-regexp">/bin:$JRE_HOME/</span>bin<br></code></pre></td></tr></table></figure><p>安装Docker-Compose</p><p><em>curl -L <a href="https://get.daocloud.io/docker/compose/releases/download/1.27.4/docker-compose-%60uname">https://get.daocloud.io/docker/compose/releases/download/1.27.4/docker-compose-`uname</a> -s<code>-</code>uname -m&#96; &gt; &#x2F;usr&#x2F;local&#x2F;bin&#x2F;docker-compose</em></p><h1 id="大数据相关"><a href="#大数据相关" class="headerlink" title="大数据相关"></a>大数据相关</h1><h2 id="spark"><a href="#spark" class="headerlink" title="spark"></a>spark</h2><p><strong>docker search spark</strong> 命令来查看可用版本</p><p><a href="https://blog.csdn.net/qq_16563637/article/details/81706042">https://blog.csdn.net/qq_16563637/article/details/81706042</a></p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs livescript">sudo docker run -<span class="hljs-literal">it</span> -d  <span class="hljs-string">\</span><br>-p <span class="hljs-number">4040</span>:<span class="hljs-number">4040</span>  <span class="hljs-string">\</span><br>-p <span class="hljs-number">57077</span>:<span class="hljs-number">7077</span>  <span class="hljs-string">\</span><br>-p <span class="hljs-number">57088</span>:<span class="hljs-number">8088</span>  <span class="hljs-string">\</span><br>-p <span class="hljs-number">57081</span>:<span class="hljs-number">8081</span>  <span class="hljs-string">\</span><br>-p <span class="hljs-number">57080</span>:<span class="hljs-number">8080</span>  <span class="hljs-string">\</span><br>-p <span class="hljs-number">57042</span>:<span class="hljs-number">8042</span>  <span class="hljs-string">\</span><br>-p <span class="hljs-number">57030</span>:<span class="hljs-number">8030</span>  <span class="hljs-string">\</span><br>-p <span class="hljs-number">57031</span>:<span class="hljs-number">8031</span>  <span class="hljs-string">\</span><br>-p <span class="hljs-number">57040</span>:<span class="hljs-number">8040</span>  <span class="hljs-string">\</span><br>-p <span class="hljs-number">57000</span>:<span class="hljs-number">9000</span>  <span class="hljs-string">\</span><br>-p <span class="hljs-number">49707</span>:<span class="hljs-number">49707</span>  <span class="hljs-string">\</span><br>-p <span class="hljs-number">50010</span>:<span class="hljs-number">50010</span>  <span class="hljs-string">\</span><br>-p <span class="hljs-number">50070</span>:<span class="hljs-number">50070</span>  <span class="hljs-string">\</span><br>-p <span class="hljs-number">50075</span>:<span class="hljs-number">50075</span>  <span class="hljs-string">\</span><br>-p <span class="hljs-number">50020</span>:<span class="hljs-number">50020</span>  <span class="hljs-string">\</span><br>-p <span class="hljs-number">50090</span>:<span class="hljs-number">50090</span>  <span class="hljs-string">\</span><br>--name spark4  <span class="hljs-string">\</span><br>sequenceiq/spark:<span class="hljs-number">1.6</span>.<span class="hljs-number">0</span> /bin/bash<br></code></pre></td></tr></table></figure><p>&#x2F;usr&#x2F;local&#x2F;spark-1.6.0-bin-hadoop2.6&#x2F;bin&#x2F;spark-submit <br>–class org.apache.spark.examples.SparkPi <br>–master spark:&#x2F;&#x2F;192.168.1.100:7077<br>–executor-memory 1G <br>–total-executor-cores 2 <br>&#x2F;usr&#x2F;local&#x2F;spark-1.6.0-bin-hadoop2.6&#x2F;lib&#x2F;spark-examples-1.6.0-hadoop2.6.0.jar <br>100</p><p>source &#x2F;etc&#x2F;profile</p>]]></content>
    
    
    
    <tags>
      
      <tag>Docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>git基本操作指令</title>
    <link href="/itsqh.github.io/2024/02/28/git%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C%E6%8C%87%E4%BB%A4/"/>
    <url>/itsqh.github.io/2024/02/28/git%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C%E6%8C%87%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<h3 id="取消git-add命令"><a href="#取消git-add命令" class="headerlink" title="取消git add命令"></a>取消git add命令</h3><p>方法一：使用git reset命令取消暂存</p><figure class="highlight sas"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sas">git <span class="hljs-keyword">reset</span> &lt;<span class="hljs-keyword">file</span>&gt;<br></code></pre></td></tr></table></figure><p>其中，<file>是要取消暂存的文件名</p><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs erlang">git reset .<br></code></pre></td></tr></table></figure><p>取消所有文件的暂存，需要注意的是，这种方法只是取消了add操作，文件的修改并没有被删除，如果需要完全撤销修改，还需要使用git checkout命令。</p><p>方法二：使用git rm命令取消暂存</p><p>这个命令用来删除文件，并将删除操作添加到暂存区。如果我们使用这个命令来删除一个被误添加到暂存区的文件，那么就可以同时取消添加和删除操作。使用如下命令：</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stata">git <span class="hljs-keyword">rm</span> --cached &lt;<span class="hljs-keyword">file</span>&gt;<br></code></pre></td></tr></table></figure><p>其中，–cached表示只从暂存区删除文件，而不删除工作区中的文件。需要取消暂存的文件名可以换成通配符，例如取消所有文件的暂存，可以使用如下命令：</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">git rm <span class="hljs-comment">--cached .</span><br></code></pre></td></tr></table></figure><p>方法三：使用git restore命令取消暂存</p><p>在Git 2.23版本中引入了新的命令git restore，该命令用来恢复工作区中的文件，也可以用来取消文件的暂存。使用如下命令：</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stata">git <span class="hljs-keyword">restore</span> --staged &lt;<span class="hljs-keyword">file</span>&gt;<br></code></pre></td></tr></table></figure><p>其中，–staged表示将文件从暂存区中恢复到工作区中。需要取消暂存的文件可以换成通配符，例如取消所有文件的暂存，可以使用如下命令：</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">git restore <span class="hljs-comment">--staged .</span><br></code></pre></td></tr></table></figure><p>需要注意的是，如果文件在暂存区中和工作区中的内容不同，那么取消暂存操作并不会恢复文件的内容，需要使用git checkout命令或其他方法将文件内容还原到之前的状态。</p><h3 id="取消git-commit命令"><a href="#取消git-commit命令" class="headerlink" title="取消git commit命令"></a>取消git commit命令</h3><h4 id="git-reset-–soft-HEAD"><a href="#git-reset-–soft-HEAD" class="headerlink" title="git reset –soft HEAD^"></a><strong>git reset –soft HEAD^</strong></h4><p>这样就成功的撤销了你的commit，注意，仅仅是撤回commit操作，您写的代码仍然保留，HEAD^的意思是上一个版本</p><h4 id="参数："><a href="#参数：" class="headerlink" title="参数："></a>参数：</h4><h5 id="–mixed"><a href="#–mixed" class="headerlink" title="–mixed"></a>–mixed</h5><p>意思是：不删除工作空间改动代码，撤销commit，并且撤销git add . 操作</p><p>这个为默认参数,git reset –mixed HEAD^ 和 git reset HEAD^ 效果是一样的。</p><h5 id="–soft"><a href="#–soft" class="headerlink" title="–soft"></a>–soft</h5><p>不删除工作空间改动代码，撤销commit，不撤销git add .</p><h5 id="–hard"><a href="#–hard" class="headerlink" title="–hard"></a>–hard</h5><p>删除工作空间改动代码，撤销commit，撤销git add .</p><p>注意完成这个操作后，就恢复到了上一次的commit状态。</p><p>顺便说一下，如果commit注释写错了，只是想改一下注释，只需要：</p><p>git commit –amend</p><p>此时会进入默认vim编辑器，修改注释完毕后保存就好了。</p><h3 id="取消被追踪并且推送到远程分支"><a href="#取消被追踪并且推送到远程分支" class="headerlink" title="取消被追踪并且推送到远程分支"></a>取消被追踪并且推送到远程分支</h3><p>git rm  -r –cached .idea  &#x2F;&#x2F; 删除远程，本地不进行删除</p>]]></content>
    
    
    
    <tags>
      
      <tag>git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>VMware安装CentOS7</title>
    <link href="/itsqh.github.io/2022/10/15/VMware%E5%AE%89%E8%A3%85CentOS7/"/>
    <url>/itsqh.github.io/2022/10/15/VMware%E5%AE%89%E8%A3%85CentOS7/</url>
    
    <content type="html"><![CDATA[<p>镜像网站：<a href="https://mirror.iscas.ac.cn/centos/7/isos/x86_64/">https://mirror.iscas.ac.cn/centos/7/isos/x86_64/</a></p><p>我使用的是: CentOS-7-x86_64-DVD-1908.iso</p><ol><li><h5 id="选择文件-新建虚拟机"><a href="#选择文件-新建虚拟机" class="headerlink" title="选择文件-新建虚拟机"></a>选择文件-新建虚拟机</h5><p><img src="/itsqh.github.io/2022/10/15/VMware%E5%AE%89%E8%A3%85CentOS7/1.%E6%96%B0%E5%BB%BA%E8%99%9A%E6%8B%9F%E6%9C%BA.png" alt="新建虚拟机"></p></li><li><h5 id="选择自定义虚拟机，下一步"><a href="#选择自定义虚拟机，下一步" class="headerlink" title="选择自定义虚拟机，下一步"></a>选择自定义虚拟机，下一步</h5><p><img src="/itsqh.github.io/2022/10/15/VMware%E5%AE%89%E8%A3%85CentOS7/2.%E8%87%AA%E5%AE%9A%E4%B9%89%E8%99%9A%E6%8B%9F%E6%9C%BA.png" alt="自定义虚拟机"></p></li><li><h5 id="下一步"><a href="#下一步" class="headerlink" title="下一步"></a>下一步</h5><p><img src="/itsqh.github.io/2022/10/15/VMware%E5%AE%89%E8%A3%85CentOS7/3.%E4%B8%8B%E4%B8%80%E6%AD%A5.png"></p></li><li><h5 id="选择镜像"><a href="#选择镜像" class="headerlink" title="选择镜像"></a>选择镜像</h5><p><img src="/itsqh.github.io/2022/10/15/VMware%E5%AE%89%E8%A3%85CentOS7/4.%E9%80%89%E6%8B%A9%E9%95%9C%E5%83%8F.png"></p></li><li><h5 id="自定义镜像名称以及位置"><a href="#自定义镜像名称以及位置" class="headerlink" title="自定义镜像名称以及位置"></a>自定义镜像名称以及位置</h5><p><img src="/itsqh.github.io/2022/10/15/VMware%E5%AE%89%E8%A3%85CentOS7/5.%E5%82%A8%E5%AD%98%E4%BD%8D%E7%BD%AE%E4%BB%A5%E5%8F%8A%E5%90%8D%E7%A7%B0.png"></p></li><li><h5 id="选择处理器数量以及内核数量"><a href="#选择处理器数量以及内核数量" class="headerlink" title="选择处理器数量以及内核数量"></a>选择处理器数量以及内核数量</h5><p><img src="/itsqh.github.io/2022/10/15/VMware%E5%AE%89%E8%A3%85CentOS7/6.%E9%80%89%E6%8B%A9%E5%90%88%E9%80%82%E8%87%AA%E5%B7%B1%E7%9A%84%E5%A4%84%E7%90%86%E5%99%A8%E6%95%B0%E9%87%8F.png"></p></li><li><h5 id="设置虚拟机的内存大小"><a href="#设置虚拟机的内存大小" class="headerlink" title="设置虚拟机的内存大小"></a>设置虚拟机的内存大小</h5><p><img src="/itsqh.github.io/2022/10/15/VMware%E5%AE%89%E8%A3%85CentOS7/7.%E9%80%89%E6%8B%A9%E5%86%85%E5%AD%98.png"></p></li><li><h5 id="选择网络类型，后续配置NAT模式的网络"><a href="#选择网络类型，后续配置NAT模式的网络" class="headerlink" title="选择网络类型，后续配置NAT模式的网络"></a>选择网络类型，后续配置NAT模式的网络</h5><p><img src="/itsqh.github.io/2022/10/15/VMware%E5%AE%89%E8%A3%85CentOS7/8.%E9%80%89%E6%8B%A9NAT%E6%A8%A1%E5%BC%8F.png"></p></li><li><h5 id="默认下一步"><a href="#默认下一步" class="headerlink" title="默认下一步"></a>默认下一步</h5><p><img src="/itsqh.github.io/2022/10/15/VMware%E5%AE%89%E8%A3%85CentOS7/9.%E4%B8%8B%E4%B8%80%E6%AD%A5.png"></p><p><img src="/itsqh.github.io/2022/10/15/VMware%E5%AE%89%E8%A3%85CentOS7/10.%E4%B8%8B%E4%B8%80%E6%AD%A5.png"></p><p><img src="/itsqh.github.io/2022/10/15/VMware%E5%AE%89%E8%A3%85CentOS7/11.%E4%B8%8B%E4%B8%80%E6%AD%A5.png"></p></li><li><h5 id="配置自己的磁盘大小"><a href="#配置自己的磁盘大小" class="headerlink" title="配置自己的磁盘大小"></a>配置自己的磁盘大小</h5><p><img src="/itsqh.github.io/2022/10/15/VMware%E5%AE%89%E8%A3%85CentOS7/12.%E9%80%89%E6%8B%A9%E7%A3%81%E7%9B%98%E5%A4%A7%E5%B0%8F.png"></p></li><li><h5 id="指定磁盘文件位置以及名称，下一步之后点击完成即可"><a href="#指定磁盘文件位置以及名称，下一步之后点击完成即可" class="headerlink" title="指定磁盘文件位置以及名称，下一步之后点击完成即可"></a>指定磁盘文件位置以及名称，下一步之后点击完成即可</h5><p><img src="/itsqh.github.io/2022/10/15/VMware%E5%AE%89%E8%A3%85CentOS7/13.%E4%B8%8B%E4%B8%80%E6%AD%A5.png"></p><p><img src="/itsqh.github.io/2022/10/15/VMware%E5%AE%89%E8%A3%85CentOS7/14.%E5%AE%8C%E6%88%90.png"></p></li><li><h5 id="之后系统会自动启动，选择Install-CentOS-7"><a href="#之后系统会自动启动，选择Install-CentOS-7" class="headerlink" title="之后系统会自动启动，选择Install CentOS 7"></a>之后系统会自动启动，选择Install CentOS 7</h5><p><img src="/itsqh.github.io/2022/10/15/VMware%E5%AE%89%E8%A3%85CentOS7/15%E5%90%AF%E5%8A%A8.png"></p></li><li><h5 id="下拉找到中文，选择简体中文"><a href="#下拉找到中文，选择简体中文" class="headerlink" title="下拉找到中文，选择简体中文"></a>下拉找到中文，选择简体中文</h5><p><img src="/itsqh.github.io/2022/10/15/VMware%E5%AE%89%E8%A3%85CentOS7/16.%E9%80%89%E6%8B%A9%E8%AF%AD%E8%A8%80.png"></p></li><li><h5 id="安装黄色的提示信息，操作即可"><a href="#安装黄色的提示信息，操作即可" class="headerlink" title="安装黄色的提示信息，操作即可"></a>安装黄色的提示信息，操作即可</h5><p><img src="/itsqh.github.io/2022/10/15/VMware%E5%AE%89%E8%A3%85CentOS7/17.%E7%AD%89%E7%9D%80.png"></p><p><img src="/itsqh.github.io/2022/10/15/VMware%E5%AE%89%E8%A3%85CentOS7/18%E5%AE%89%E8%A3%85%E4%BD%8D%E7%BD%AE.png"></p><ul><li>安装位置，选择的默认的即可</li></ul><p><img src="/itsqh.github.io/2022/10/15/VMware%E5%AE%89%E8%A3%85CentOS7/19.%E5%AE%89%E8%A3%85.png"></p><ul><li><strong>完成</strong>之后，点击<strong>开始安装</strong>即可</li></ul></li><li><h5 id="进行Root用户密码设置"><a href="#进行Root用户密码设置" class="headerlink" title="进行Root用户密码设置"></a>进行Root用户密码设置</h5><p><img src="/itsqh.github.io/2022/10/15/VMware%E5%AE%89%E8%A3%85CentOS7/20.%E7%BB%A7%E7%BB%AD.png"></p><ul><li>设置Root密码界面</li></ul><p><img src="/itsqh.github.io/2022/10/15/VMware%E5%AE%89%E8%A3%85CentOS7/22.%E8%AE%BE%E7%BD%AEroot%E5%AF%86%E7%A0%81.png"></p><ul><li><p>设置完成密码之后，等待安装即可</p><p><img src="/itsqh.github.io/2022/10/15/VMware%E5%AE%89%E8%A3%85CentOS7/23.%E7%AD%89%E5%BE%85%E5%AE%89%E8%A3%85%E5%8D%B3%E5%8F%AF.png"></p></li><li><p>等待安装完成，点击重启即可</p><p><img src="/itsqh.github.io/2022/10/15/VMware%E5%AE%89%E8%A3%85CentOS7/24.%E5%AE%89%E8%A3%85%E6%88%90%E5%8A%9F%E9%87%8D%E5%90%AF.png"></p></li></ul></li><li><h5 id="等待系统重启之后，选择第一条回车"><a href="#等待系统重启之后，选择第一条回车" class="headerlink" title="等待系统重启之后，选择第一条回车"></a>等待系统重启之后，选择第一条回车</h5><p><img src="/itsqh.github.io/2022/10/15/VMware%E5%AE%89%E8%A3%85CentOS7/25.%E9%80%89%E6%8B%A9%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%8D%B3%E5%8F%AF.png"></p></li><li><h5 id="输入账号密码，密码输入的时候不显示，回车即可"><a href="#输入账号密码，密码输入的时候不显示，回车即可" class="headerlink" title="输入账号密码，密码输入的时候不显示，回车即可"></a>输入账号密码，密码输入的时候不显示，回车即可</h5><p><img src="/itsqh.github.io/2022/10/15/VMware%E5%AE%89%E8%A3%85CentOS7/27.%E8%BE%93%E5%85%A5%E8%B4%A6%E5%8F%B7%E5%AF%86%E7%A0%81.png"></p></li><li><h5 id="完成登录，进入系统"><a href="#完成登录，进入系统" class="headerlink" title="完成登录，进入系统"></a>完成登录，进入系统</h5><p><img src="/itsqh.github.io/2022/10/15/VMware%E5%AE%89%E8%A3%85CentOS7/28.%E5%AE%8C%E6%88%90.png"></p></li></ol>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Docker中容器相关操作</title>
    <link href="/itsqh.github.io/2022/09/02/Docker%E4%B8%AD%E5%AE%B9%E5%99%A8%E7%9B%B8%E5%85%B3%E6%93%8D%E4%BD%9C/"/>
    <url>/itsqh.github.io/2022/09/02/Docker%E4%B8%AD%E5%AE%B9%E5%99%A8%E7%9B%B8%E5%85%B3%E6%93%8D%E4%BD%9C/</url>
    
    <content type="html"><![CDATA[<h5 id="查看Docker引擎中运行的容器"><a href="#查看Docker引擎中运行的容器" class="headerlink" title="查看Docker引擎中运行的容器"></a>查看Docker引擎中运行的容器</h5><p><code>Docker ps</code></p><h5 id="镜像下载"><a href="#镜像下载" class="headerlink" title="镜像下载"></a>镜像下载</h5><p><code>docker pull &lt;镜像名称&gt;</code></p>]]></content>
    
    
    
    <tags>
      
      <tag>Docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Centos7的安装</title>
    <link href="/itsqh.github.io/2022/09/02/CentOS7%E7%9A%84%E5%AE%89%E8%A3%85/"/>
    <url>/itsqh.github.io/2022/09/02/CentOS7%E7%9A%84%E5%AE%89%E8%A3%85/</url>
    
    <content type="html"><![CDATA[<p>下载镜像网站：<a href="https://mirror.iscas.ac.cn/centos/7/isos/x86_64/">https://mirror.iscas.ac.cn/centos/7/isos/x86_64/</a></p><h3 id="配置java环境"><a href="#配置java环境" class="headerlink" title="配置java环境"></a>配置java环境</h3><p>打开配置文件 <code>vim /etc/profile</code><br>在文件末尾追加</p><p><code>JAVA_HOME=/root/java/jdk1.8.0_341 CLASSPATH=%JAVA_HOME%/lib:%JAVA_HOME%/jre/lib PATH=$PATH:$JAVA_HOME/bin:$JAVA_HOME/jre/bin export PATH CLASSPATH JAVA_HOME</code></p><p>注意：&#x2F;usr&#x2F;local&#x2F;java&#x2F;jdk文件名中的jdk文件名需要改为自己准确的文件名称哦</p><p>然后按esc退出编辑模式，按shift+:输入wq保存并退出</p><p>使配置文件生效</p><ul><li>执行命令：<code>source /etc/profile</code></li></ul><p>第六步：检查是否安装成功</p><ul><li>执行命令：<code>java -version</code></li></ul><p>bad ELF interpreter: No such file or directory，安装下glic即可</p><p><code>yum install glibc.i686</code></p><h3 id="配置系统网络环境"><a href="#配置系统网络环境" class="headerlink" title="配置系统网络环境"></a>配置系统网络环境</h3><p>点击虚拟机左侧，选中安装的系统，右键，设置，查看网络连接信息,【硬件】页签，选择【网络适配器】，网络连接选择【NAT…】，点击【确定】按钮 </p><p>在虚拟机中，选中安装的系统，点击工具条中的【编辑】-选择【虚拟网络编辑器】</p><p>选中【VMnet8】，点击【NAT设置】，查看本地IP网段<br>点击【DHCP设置】，查看IP起始段，方便设置IP地址 </p><p>进入命令窗口，切换到root的根目录，<br>输入命令：vi &#x2F;etc&#x2F;sysconfig&#x2F;network-scripts&#x2F;ifcfg-ens33 </p><p>点击键盘【i】键，修改并增加如下内容信息，完成之后，点击键盘【Esc】键，输入【:wq!】,点击回车键，保存退出 </p><p>TYPE&#x3D;Ethernet<br>PROXY_METHOD&#x3D;none<br>BROWSER_ONLY&#x3D;no<br>BOOTPROTO&#x3D;static<br>DEFROUTE&#x3D;yes<br>IPV4_FAILURE_FATAL&#x3D;no<br>IPV6INIT&#x3D;yes<br>IPV6_AUTOCONF&#x3D;yes<br>IPV6_DEFROUTE&#x3D;yes<br>IPV6_FAILURE_FATAL&#x3D;no<br>IPV6_ADDR_GEN_MODE&#x3D;stable-privacy<br>NAME&#x3D;ens33<br>UUID&#x3D;默认即可<br>DEVICE&#x3D;ens33<br>ONBOOT&#x3D;yes<br>IPADDR&#x3D;192.168.168.226<br>GATEWAY&#x3D;192.168.168.2<br>NETMASK&#x3D;255.255.255.0<br>DNS1&#x3D;114.114.114.114<br>输入命令，使配置有效service network restart </p><p>配置完毕后，查询IP信息，并确认是否网络畅通</p>]]></content>
    
    
    
    <tags>
      
      <tag>CentOS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Liunx常用命令</title>
    <link href="/itsqh.github.io/2022/09/02/Liunx%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <url>/itsqh.github.io/2022/09/02/Liunx%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<h2 id="一、登录与注销"><a href="#一、登录与注销" class="headerlink" title="一、登录与注销"></a>一、登录与注销</h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-number">1</span>)sudo useradd lilei  <span class="hljs-regexp">//</span>添加用户 (不能被立即使用，需设置密码 sudo passwd lilei)  <br><span class="hljs-number">2</span>)sudo adduser lilei  <span class="hljs-regexp">//</span>添加用户<br><span class="hljs-number">3</span>)login  <span class="hljs-regexp">//</span>登录或切换用户<br><span class="hljs-number">4</span>)logout <span class="hljs-regexp">//</span>注销用户（命令行）  <span class="hljs-keyword">exit</span>(shell-退出控制台)<br><span class="hljs-number">5</span>)shutdown -h <span class="hljs-number">10</span>  <span class="hljs-regexp">//</span><span class="hljs-number">10</span>分钟后自动关机shutdown -c  <span class="hljs-regexp">//</span>取消<br><span class="hljs-number">6</span>)halt(root用户)  <span class="hljs-regexp">//</span>关闭所有进程后自动关机<br><span class="hljs-number">7</span>)poweroff <span class="hljs-regexp">//</span>同上<br><span class="hljs-number">8</span>)shutdown -r <span class="hljs-number">10</span> <span class="hljs-regexp">//</span>十分钟后自动重启<br><span class="hljs-number">9</span>)init <span class="hljs-number">6</span>  <span class="hljs-regexp">//</span>重启 （<span class="hljs-number">0</span>-停机，<span class="hljs-number">1</span>-单用户，<span class="hljs-number">2</span>-多用户，<span class="hljs-number">3</span>-完全多用户，<span class="hljs-number">4</span>-图形化，<span class="hljs-number">5</span>-安全模式，<span class="hljs-number">6</span>-重启）<br><span class="hljs-number">10</span>)reboot  <span class="hljs-regexp">//</span>重启<br></code></pre></td></tr></table></figure><h2 id="二、目录与文件"><a href="#二、目录与文件" class="headerlink" title="二、目录与文件"></a>二、目录与文件</h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-number">1</span>)pwd   <span class="hljs-regexp">//</span>显示当前工作目录<br><span class="hljs-number">2</span>)mkdir mydir  <span class="hljs-regexp">//</span>创建工作目录<br><span class="hljs-number">3</span>)cd mydir  <span class="hljs-regexp">//</span>更改工作目录<br><span class="hljs-number">4</span>)rmdir mydir <span class="hljs-regexp">//</span>删除工作目录<br><span class="hljs-number">5</span>)touch myfile  <span class="hljs-regexp">//</span>创建文件<br><span class="hljs-number">6</span>)mv myfile mydir  <span class="hljs-regexp">//</span>移动目录或文件<br><span class="hljs-number">7</span>)cp myfile myfir  <span class="hljs-regexp">//</span>复制目录或文件<br><span class="hljs-number">8</span>)rm -rf mydir  <span class="hljs-regexp">//</span>删除目录或文件<br><span class="hljs-number">9</span>)ls -l myfile  <span class="hljs-regexp">//</span>查看文件最后被编辑时间<br><span class="hljs-number">10</span>)ls -lu myfile <span class="hljs-regexp">//</span>查看文件最后被访问时间<br><span class="hljs-number">11</span>)touch -at <span class="hljs-number">01011212</span> myfile  <span class="hljs-regexp">//</span>修改文件最后被访问时间<br><span class="hljs-number">12</span>)ls <span class="hljs-regexp">//</span>列出所有文件和目录<br><span class="hljs-number">13</span>)ls -a <span class="hljs-regexp">//</span>查看所有文件<br><span class="hljs-number">14</span>)ls -i <span class="hljs-regexp">//</span>显示文件索引节点号<br><span class="hljs-number">15</span>)ls -l <span class="hljs-regexp">//</span>详细显示<br><span class="hljs-number">16</span>)ls -m <span class="hljs-regexp">//</span>以逗号分隔<br><span class="hljs-number">17</span>)sudo apt-get install tree <br><span class="hljs-number">18</span>)tree -l<span class="hljs-regexp">//</span>以树状图列出目录内容<br><span class="hljs-number">19</span>)tree -a <span class="hljs-regexp">//</span>所有<br><span class="hljs-number">20</span>)tree -i <span class="hljs-regexp">//</span>不以阶梯状<br><span class="hljs-number">21</span>)tree -s  <span class="hljs-regexp">//</span>列出文件或目录大小<br><span class="hljs-number">22</span>)tree -t  <span class="hljs-regexp">//</span>按更改时间<br><span class="hljs-number">23</span>)file -b myfile  <span class="hljs-regexp">//</span>显示目录或文件的详细信息<br><span class="hljs-number">24</span>)stat myfile  <span class="hljs-regexp">//</span>同上<br></code></pre></td></tr></table></figure><h2 id="三、文件内容显示"><a href="#三、文件内容显示" class="headerlink" title="三、文件内容显示"></a>三、文件内容显示</h2><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver"><span class="hljs-number">1</span>)cat &gt; myfile <span class="hljs-comment"> //创建文件并编辑内容（ctrl+D结束编辑）</span><br><span class="hljs-number">2</span>)cat -n myfile <span class="hljs-comment"> //查看文件</span><br><span class="hljs-number">3</span>)chmod [u/g/o/<span class="hljs-keyword">a</span>][+/-/=][r/w/x] myfile <span class="hljs-comment"> //更改文件权限</span><br>u-user,g-group,o-others,<span class="hljs-keyword">a</span>-all  .   +-添加,<span class="hljs-comment">--删除,=-重置   .</span><br>r-<span class="hljs-built_in">read</span>读（<span class="hljs-number">4</span>），w-<span class="hljs-built_in">write</span>写（<span class="hljs-number">2</span>），x-execute执行（<span class="hljs-number">1</span>）<br><span class="hljs-number">4</span>)more myfile <span class="hljs-comment"> //分页往后显示文件（Space空格）</span><br><span class="hljs-number">5</span>)less myfile <span class="hljs-comment"> //分页自由显示文件（Page Down / Page Up）</span><br><span class="hljs-number">6</span>)head (<span class="hljs-number">-10</span>) myfile <span class="hljs-comment"> //指定显示文件前若干行（默认前10）</span><br><span class="hljs-number">7</span>)tail (<span class="hljs-number">-10</span>) myfile <span class="hljs-comment"> //指定显示文件后若干行（默认后10）</span><br></code></pre></td></tr></table></figure><h2 id="四、文件内容处理"><a href="#四、文件内容处理" class="headerlink" title="四、文件内容处理"></a>四、文件内容处理</h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-number">1</span>)sort myfile  <span class="hljs-regexp">//</span>对文件内容进行排序<br><span class="hljs-number">2</span>)sort -r myfile  <span class="hljs-regexp">//</span>逆序<br><span class="hljs-number">3</span>)uniq myfile  <span class="hljs-regexp">//</span>检查文件中的重复内容<br><span class="hljs-number">4</span>)grep （-c）‘a’ myfile  <span class="hljs-regexp">//</span>在文件中查找指定内容 (显示行号)<br><span class="hljs-number">5</span>)diff myfile01 myfile02  <span class="hljs-regexp">//</span>对不同文件进行比较<br><span class="hljs-number">6</span>)diff3 myfile01 myfile02 myfile03  <span class="hljs-regexp">//</span>三个文件<br><span class="hljs-number">7</span>)sdiff myfile01 myfile02  <span class="hljs-regexp">//</span>合并<br><span class="hljs-number">8</span>)cmp myfile01 myfile02  <span class="hljs-regexp">//</span>通过字节对不同文件进行比较<br><span class="hljs-number">9</span>)comm myfile01 myfile02  <span class="hljs-regexp">//</span>对有序文件进行比较<br><span class="hljs-number">10</span>)cut -b(-c)(-d) <span class="hljs-number">2</span>(<span class="hljs-number">3</span>) myfile  <span class="hljs-regexp">//</span>对文件内容进行剪切<br><span class="hljs-number">11</span>)paste myfile02 myfile01 <span class="hljs-regexp">//</span>对文件内容进行粘贴 <span class="hljs-number">02</span>-）<span class="hljs-number">01</span><br><span class="hljs-number">12</span>)wc （-参数） myfile  <span class="hljs-regexp">//</span>对文件内容进行统计 （c-字符数,w-单词数,l-行数）<br></code></pre></td></tr></table></figure><h2 id="五、压缩"><a href="#五、压缩" class="headerlink" title="五、压缩"></a>五、压缩</h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-number">1</span>)zip myfile.zip myfile  <span class="hljs-regexp">//</span>压缩<br><span class="hljs-number">2</span>)zip -d myfile.zip myfile  <span class="hljs-regexp">//</span>添加<br><span class="hljs-number">3</span>)zip -m myfile.zip myfile  <span class="hljs-regexp">//</span>删除<br><span class="hljs-number">4</span>)unzip -o myfile.zip  <span class="hljs-regexp">//</span>解压（覆盖）<br><span class="hljs-number">5</span>)unzip -n myfile.zip  <span class="hljs-regexp">//</span>解压（不覆盖）<br><span class="hljs-number">6</span>)zipinfo myfile.zip  <span class="hljs-regexp">//</span>列出压缩文件信息<br><span class="hljs-number">7</span>)  tar -xvf  myfile.tar.gz<span class="hljs-regexp">//</span>解压<br></code></pre></td></tr></table></figure><h2 id="六、获取帮助"><a href="#六、获取帮助" class="headerlink" title="六、获取帮助"></a>六、获取帮助</h2><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs stata">1)<span class="hljs-keyword">man</span> <span class="hljs-keyword">ls</span>  <span class="hljs-comment">//获取帮助</span><br>2)<span class="hljs-keyword">man</span> -k <span class="hljs-keyword">ls</span>  <span class="hljs-comment">//不清楚完整名字</span><br>3)whatis <span class="hljs-keyword">ls</span>  <span class="hljs-comment">//获取帮助</span><br>4)<span class="hljs-keyword">help</span> <span class="hljs-keyword">cd</span>  / <span class="hljs-keyword">cd</span> –<span class="hljs-keyword">help</span>  <span class="hljs-comment">//获取帮助 -d(简短描述) -s(用法简介)</span><br>5)info who  <span class="hljs-comment">//获取帮助</span><br></code></pre></td></tr></table></figure><h2 id="七、其他命令"><a href="#七、其他命令" class="headerlink" title="七、其他命令"></a>七、其他命令</h2><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">1)<span class="hljs-keyword">clear</span>  <span class="hljs-string">//</span>清楚屏幕信息<br>2)<span class="hljs-keyword">echo</span> xx  <span class="hljs-string">//</span>显示文本  x=0  <span class="hljs-keyword">echo</span> $x . <span class="hljs-keyword">echo</span> -e \$x . <span class="hljs-keyword">echo</span> $<span class="hljs-params">(pwd)</span><br>3)date  <span class="hljs-string">//</span>显示日期和时间（+%y 年  +%m 月  +%d日）<br>4)cal  <span class="hljs-string">//</span>显示当前日期  cal -y<br>5)ps  <span class="hljs-string">//</span>查看当前进程  -A<span class="hljs-params">(所有)</span>  U  lilei <span class="hljs-params">(用户lilei)</span><br>6)kill -9 2315  <span class="hljs-string">//</span>终止某一进程  <br>7)ps -ef | grep Jincheng<br>8)pkill Jincheng<br>9)killall Jincheng<br>10)last  <span class="hljs-string">//</span>显示最近登录系统的用户信息-6列<br>11)<span class="hljs-keyword">history</span> （10） <span class="hljs-string">//</span>显示历史指令-默认1000行<br>12)sudo adduser lilei sudo  <span class="hljs-string">//</span>给普通用户赋予root权限<br>13)sudo usermod -G sudo lilei  <span class="hljs-string">//</span>同上<br>14)<span class="hljs-keyword">alias</span> l=’<span class="hljs-keyword">ls</span>’  <span class="hljs-string">//</span>定义命令别名<br>15)<span class="hljs-keyword">unalias</span> l  <span class="hljs-string">//</span>删除别名<br>16)<span class="hljs-keyword">alias</span>  <span class="hljs-string">//</span>列出别名<br>17) systemctl status firewalld  <span class="hljs-string">//</span>查看防火墙是否开启<br>18) systemctl start firewalld   <span class="hljs-string">//</span>开启防火墙<br>19) systemctl stop firewalld   <span class="hljs-string">//</span>关闭防火墙<br>20）firewall-cmd <span class="hljs-params">--list-ports</span>  <span class="hljs-string">//</span> 查看所有开启的端口<br>21) firewall-cmd <span class="hljs-params">--zone=public</span> <span class="hljs-params">--add-port=80/tcp</span> <span class="hljs-params">--permanent</span>  <span class="hljs-string">//</span>防火墙开启端口访问<br>命令含义： <span class="hljs-params">--zone</span> <span class="hljs-comment">#作用域 --add-port=80/tcp #添加端口，格式为：端口/通讯协议 --permanent #永久生效，没有此参数重启后失效</span><br>22) firewall-cmd <span class="hljs-params">--reload</span> <span class="hljs-string">//</span>重启防火墙<br>23) firewall-cmd <span class="hljs-params">--zone=public</span> <span class="hljs-params">--query-port=80/tcp</span>  <span class="hljs-string">//</span>检查80端口配置是否有效<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Liunx</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Docker中镜像相关操作</title>
    <link href="/itsqh.github.io/2022/09/02/Docker%E4%B8%AD%E9%95%9C%E5%83%8F%E7%9B%B8%E5%85%B3%E6%93%8D%E4%BD%9C/"/>
    <url>/itsqh.github.io/2022/09/02/Docker%E4%B8%AD%E9%95%9C%E5%83%8F%E7%9B%B8%E5%85%B3%E6%93%8D%E4%BD%9C/</url>
    
    <content type="html"><![CDATA[<h5 id="镜像查看"><a href="#镜像查看" class="headerlink" title="镜像查看"></a>镜像查看</h5><ul><li><p>查看当前本地仓库中有那些镜像   </p><p><code>docker image ls</code>  |  <code>docker images</code></p></li></ul><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">[root@localhost Docker]<span class="hljs-comment"># docker image ls</span><br>REPOSITORY           <span class="hljs-keyword">TAG</span>       <span class="hljs-title">IMAGE</span> ID       CREATED         SIZE<br>tomcat               <span class="hljs-number">8.5</span>       <span class="hljs-number">2</span>d2bccf89f53   <span class="hljs-number">8</span> months ago    <span class="hljs-number">678M</span>B<br></code></pre></td></tr></table></figure><p>结果解析：</p><blockquote><p>REPOSITORY ：镜像名称</p><p>TAG：版本</p><p>IMAGE ID：镜像id      </p><p> CREATED：创建时间        </p><p>SIZE：大小</p></blockquote><h5 id="镜像下载"><a href="#镜像下载" class="headerlink" title="镜像下载"></a>镜像下载</h5><p><code>docker pull &lt;镜像名称&gt;</code></p><ul><li><p>获取最新版本:</p><p><code>docker pull redis</code>  |  <code>docker pull redis:latest</code></p></li><li><p>获取指定版本： </p><p><code>docker pull redis:9.0</code></p></li></ul><h5 id="镜像搜索"><a href="#镜像搜索" class="headerlink" title="镜像搜索"></a>镜像搜索</h5><p><code>docker search &lt;镜像名&gt;</code></p><ul><li><p>搜索redis镜像：</p><p><code>docker search redie</code></p></li></ul><h5 id="删除镜像"><a href="#删除镜像" class="headerlink" title="删除镜像"></a>删除镜像</h5><p><code>docker image rm &lt;镜像名&gt;:&lt;版本号&gt;</code>  |  <code>docker image rm &lt;镜像id&gt;</code></p><ul><li><p>删除版本为 <strong>latest</strong> 的 <strong>hello-world</strong> 的镜像</p><p><code>docker image rm hello-world:latest</code></p><blockquote><p>必须是没有运行过的镜像</p></blockquote></li><li><p>强制删除：</p><p><code>docker image rm -f hello-world:latest</code></p></li><li><p>直接删除所有镜像</p><p><code>docker rmi  $(docker images -q)</code></p></li><li><p>批量删除tomcat镜像：</p></li></ul><p>​<code>docker image rm -f $(docker images tomcat -q)</code></p><h5 id="辅助命令"><a href="#辅助命令" class="headerlink" title="辅助命令"></a>辅助命令</h5><ul><li><p>启动docker</p><p><code>sudo service docker start</code></p></li><li><p>设置开机自启</p><p><code>sudo chkconfig docker on</code></p></li><li><p>查看docker客户端引擎 和 服务端引擎版本信息</p><p><code>docker version</code> </p></li><li><p>用来查看docker 引擎和服务端引擎的详细信息</p><p><code>docker info</code></p></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>Docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Typora常用命令</title>
    <link href="/itsqh.github.io/2022/08/29/Typora%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <url>/itsqh.github.io/2022/08/29/Typora%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<h2 id="1-目录："><a href="#1-目录：" class="headerlink" title="1.目录："></a>1.目录：</h2><p>每个 md 文件的开头都可以直接输入，当文档记录很多时，方便查看</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">输入 [toc] 回车，即可看到整个内容所用的标题，按照标题级别显示<br></code></pre></td></tr></table></figure><p><img src="https://pic1.zhimg.com/80/v2-ac47d457a59da552fe5aae44b3be925c_720w.jpg" alt="img"></p><h2 id="2-标题："><a href="#2-标题：" class="headerlink" title="2.标题："></a>2.标题：</h2><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs text">输入 #+空格+标题名称 回车或者光标离开。记住一定要有空格。<br>我刚开始没加空格，还以为我的typora不能用呢。###### 最多支持六级标题，如下图<br></code></pre></td></tr></table></figure><p><img src="https://pic2.zhimg.com/80/v2-990c26d7311236f6487dc493a9890719_720w.jpg" alt="img"></p><h2 id="3-代码块："><a href="#3-代码块：" class="headerlink" title="3.代码块："></a>3.代码块：</h2><p>作为一名工程师，代码块这种格式太好用了</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs text">输入 三个波浪号 ～～～ 或者 三个反引号 ``` ，回车。<br>记得修改 markdown 配置，然后重启 typora。可以显示行号<br></code></pre></td></tr></table></figure><p><img src="https://pic3.zhimg.com/80/v2-555f8b9ff2e20aea4244413041ff6366_720w.jpg" alt="img"></p><h2 id="4-引用块："><a href="#4-引用块：" class="headerlink" title="4.引用块："></a>4.引用块：</h2><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">输入 &gt; ,回车即可<br></code></pre></td></tr></table></figure><p><img src="https://pic3.zhimg.com/80/v2-31742296f4cfd8140f45e107d841b7da_720w.jpg" alt="img"></p><h2 id="5-分割线："><a href="#5-分割线：" class="headerlink" title="5.分割线："></a>5.分割线：</h2><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">输入 *** 或者 --- ，回车<br></code></pre></td></tr></table></figure><h2 id="6-清单列表："><a href="#6-清单列表：" class="headerlink" title="6.清单列表："></a>6.清单列表：</h2><p>这个也很赞。</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs text">输入 &quot;1&quot;+&quot;.&quot;+&quot;空格&quot; ，自动生成有序列表<br>输入 &quot;-&quot; 或 &quot;+&quot; 或 &quot;*&quot;， +&quot;空格&quot; ，自动生成无序列表<br><br>还可以在列表基础上，添加清单功能<br>输入 - [ ] ,注意每个符号之间都有空格<br></code></pre></td></tr></table></figure><p><img src="https://pic1.zhimg.com/80/v2-f568c5925f404e1dd213a53470394e88_720w.jpg" alt="img"></p><h2 id="7-字体："><a href="#7-字体：" class="headerlink" title="7.字体："></a>7.字体：</h2><p>一般来说很少对字体有太多要求，不过还是顺带提一下常用的。</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs text">**加粗内容** ，前后两个星号<br>~~删除线~~，前后两个波浪线<br>*斜体*，前后一个星号<br>&lt;u&gt;下划线&lt;/u&gt;，html 代码了都<br></code></pre></td></tr></table></figure><h2 id="8-插入表格："><a href="#8-插入表格：" class="headerlink" title="8.插入表格："></a>8.插入表格：</h2><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">|标题1|标题2| ，然后回车，再根据需要添加行列<br></code></pre></td></tr></table></figure><p><img src="https://pic1.zhimg.com/80/v2-4ba31512bde0b6436a061b59010b7314_720w.png" alt="img"></p><h2 id="9-彩蛋"><a href="#9-彩蛋" class="headerlink" title="9.彩蛋"></a>9.彩蛋</h2><p>表情包：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">输入 :smile ，就可以看到很多表情<br></code></pre></td></tr></table></figure><p><img src="https://pic1.zhimg.com/80/v2-ca730e493e981b8c8639cec6743e3658_720w.jpg" alt="img"></p><hr><p>你会发现，总结了这么些，在知乎的编辑栏中，已经把最常用的列出来了。</p><p><img src="https://pic1.zhimg.com/80/v2-4ee5062449f2c17db06515b698b89ebc_720w.png" alt="img"></p><p>我最喜欢用的就是引用和代码块。</p><hr><p>为什么说 Typora 这么好用，这么多人喜欢用。</p><p>我觉得这个逻辑跟使用 Mac 是一样的，它无形中对使用方提出了很多要求，你要记住很多命令才能很顺手，一旦顺手就很容易沉浸在里面。</p><p>所以 Typora 不是给用户提供了多么方便简单的使用方式，而是提高了对用户的要求，逼着用户去学习一些稍微有点困难的命令，然后再去更好的使用工具。</p><blockquote><p>原文链接：<a href="https://zhuanlan.zhihu.com/p/156954520">https://zhuanlan.zhihu.com/p/156954520</a></p></blockquote>]]></content>
    
    
    
    <tags>
      
      <tag>Typora</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo常用命令</title>
    <link href="/itsqh.github.io/2022/08/29/Hexo%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <url>/itsqh.github.io/2022/08/29/Hexo%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<h2 id="init（新建一个网站）"><a href="#init（新建一个网站）" class="headerlink" title="init（新建一个网站）"></a>init（新建一个网站）</h2><p>**<code>$ hexo init [folder]</code> **</p><p>新建一个网站。如果没有设置 <code>folder</code> ，Hexo 默认在目前的文件夹建立网站。</p><h2 id="new（新建一篇文章）"><a href="#new（新建一篇文章）" class="headerlink" title="new（新建一篇文章）"></a>new（新建一篇文章）</h2><p><strong><code>$ hexo new [layout] &lt;title&gt;</code></strong></p><p>新建一篇文章。如果没有设置 <code>layout</code> 的话，默认使用 <a href="https://hexo.bootcss.com/docs/configuration.html">_config.yml</a> 中的 <code>default_layout</code> 参数代替。如果标题包含空格的话，请使用引号括起来。</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs actionscript">$ hexo <span class="hljs-keyword">new</span> <span class="hljs-string">&quot;post title with whitespace&quot;</span><br></code></pre></td></tr></table></figure><table><thead><tr><th align="left">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><code>-p</code>, <code>--path</code></td><td align="left">自定义新文章的路径</td></tr><tr><td align="left"><code>-r</code>, <code>--replace</code></td><td align="left">如果存在同名文章，将其替换</td></tr><tr><td align="left"><code>-s</code>, <code>--slug</code></td><td align="left">文章的 Slug，作为新文章的文件名和发布后的 URL</td></tr></tbody></table><p>默认情况下，Hexo 会使用文章的标题来决定文章文件的路径。对于独立页面来说，Hexo 会创建一个以标题为名字的目录，并在目录中放置一个 <code>index.md</code> 文件。你可以使用 <code>--path</code> 参数来覆盖上述行为、自行决定文件的目录：</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs haxe">hexo <span class="hljs-keyword">new</span> <span class="hljs-type">page</span> --path about/me <span class="hljs-string">&quot;About me&quot;</span><br></code></pre></td></tr></table></figure><p>以上命令会创建一个 <code>source/about/me.md</code> 文件，同时 Front Matter 中的 title 为 <code>&quot;About me&quot;</code></p><p>注意！title 是必须指定的！如果你这么做并不能达到你的目的：</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">hexo <span class="hljs-keyword">new</span> page <span class="hljs-comment">--path about/me</span><br></code></pre></td></tr></table></figure><p>此时 Hexo 会创建 <code>source/_posts/about/me.md</code>，同时 <code>me.md</code> 的 Front Matter 中的 title 为 <code>&quot;page&quot;</code>。这是因为在上述命令中，hexo-cli 将 <code>page</code> 视为指定文章的标题、并采用默认的 <code>layout</code>。</p><h2 id="generate（生成静态文件）"><a href="#generate（生成静态文件）" class="headerlink" title="generate（生成静态文件）"></a>generate（生成静态文件）</h2><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs verilog">$ hexo <span class="hljs-keyword">generate</span><br></code></pre></td></tr></table></figure><p>生成静态文件。</p><table><thead><tr><th align="left">选项</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><code>-d</code>, <code>--deploy</code></td><td align="left">文件生成后立即部署网站</td></tr><tr><td align="left"><code>-w</code>, <code>--watch</code></td><td align="left">监视文件变动</td></tr><tr><td align="left"><code>-b</code>, <code>--bail</code></td><td align="left">生成过程中如果发生任何未处理的异常则抛出异常</td></tr><tr><td align="left"><code>-f</code>, <code>--force</code></td><td align="left">强制重新生成文件 Hexo 引入了差分机制，如果 <code>public</code> 目录存在，那么 <code>hexo g</code> 只会重新生成改动的文件。 使用该参数的效果接近 <code>hexo clean &amp;&amp; hexo generate</code></td></tr><tr><td align="left"><code>-c</code>, <code>--concurrency</code></td><td align="left">最大同时生成文件的数量，默认无限制</td></tr></tbody></table><p>该命令可以简写为</p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crystal"><span class="hljs-variable">$ </span>hexo g<br></code></pre></td></tr></table></figure><h2 id="publish（发表草稿）"><a href="#publish（发表草稿）" class="headerlink" title="publish（发表草稿）"></a>publish（发表草稿）</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">$ hexo publish [layout] <span class="hljs-tag">&lt;<span class="hljs-name">filename</span>&gt;</span><br></code></pre></td></tr></table></figure><p>发表草稿。</p><h2 id="server（启动服务器）"><a href="#server（启动服务器）" class="headerlink" title="server（启动服务器）"></a>server（启动服务器）</h2><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs axapta">$ hexo <span class="hljs-keyword">server</span><br></code></pre></td></tr></table></figure><p>启动服务器。默认情况下，访问网址为： <code>http://localhost:4000/</code>。</p><table><thead><tr><th align="left">选项</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><code>-p</code>, <code>--port</code></td><td align="left">重设端口</td></tr><tr><td align="left"><code>-s</code>, <code>--static</code></td><td align="left">只使用静态文件</td></tr><tr><td align="left"><code>-l</code>, <code>--log</code></td><td align="left">启动日记记录，使用覆盖记录格式</td></tr></tbody></table><h2 id="deploy（部署网站）"><a href="#deploy（部署网站）" class="headerlink" title="deploy（部署网站）"></a>deploy（部署网站）</h2><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crystal"><span class="hljs-variable">$ </span>hexo deploy<br></code></pre></td></tr></table></figure><p>部署网站。</p><table><thead><tr><th align="left">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><code>-g</code>, <code>--generate</code></td><td align="left">部署之前预先生成静态文件</td></tr></tbody></table><p>该命令可以简写为：</p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crystal"><span class="hljs-variable">$ </span>hexo d<br></code></pre></td></tr></table></figure><h2 id="render（渲染文件）"><a href="#render（渲染文件）" class="headerlink" title="render（渲染文件）"></a>render（渲染文件）</h2><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs prolog">$ hexo render &lt;file1&gt; [file2] ...<br></code></pre></td></tr></table></figure><p>渲染文件。</p><table><thead><tr><th align="left">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><code>-o</code>, <code>--output</code></td><td align="left">设置输出路径</td></tr></tbody></table><h2 id="migrate（从其他博客系统迁移内容）"><a href="#migrate（从其他博客系统迁移内容）" class="headerlink" title="migrate（从其他博客系统迁移内容）"></a>migrate（从其他博客系统迁移内容）</h2><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crystal"><span class="hljs-variable">$ </span>hexo migrate &lt;<span class="hljs-keyword">type</span>&gt;<br></code></pre></td></tr></table></figure><p>从其他博客系统 <a href="https://hexo.bootcss.com/docs/migration.html">迁移内容</a>。</p><h2 id="clean（清除缓存）"><a href="#clean（清除缓存）" class="headerlink" title="clean（清除缓存）"></a>clean（清除缓存）</h2><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crystal"><span class="hljs-variable">$ </span>hexo clean<br></code></pre></td></tr></table></figure><p>清除缓存文件 (<code>db.json</code>) 和已生成的静态文件 (<code>public</code>)。</p><p>在某些情况（尤其是更换主题后），如果发现您对站点的更改无论如何也不生效，您可能需要运行该命令。</p><h2 id="list（列出网站资料）"><a href="#list（列出网站资料）" class="headerlink" title="list（列出网站资料）"></a>list（列出网站资料）</h2><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crystal"><span class="hljs-variable">$ </span>hexo list &lt;<span class="hljs-keyword">type</span>&gt;<br></code></pre></td></tr></table></figure><p>列出网站资料。</p><h2 id="version（版本）"><a href="#version（版本）" class="headerlink" title="version（版本）"></a>version（版本）</h2><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript">$ hexo <span class="hljs-built_in">version</span><br></code></pre></td></tr></table></figure><p>显示 Hexo 版本。</p><h2 id="选项"><a href="#选项" class="headerlink" title="选项"></a>选项</h2><h3 id="安全模式"><a href="#安全模式" class="headerlink" title="安全模式"></a>安全模式</h3><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">$ hexo <span class="hljs-comment">--safe</span><br></code></pre></td></tr></table></figure><p>在安全模式下，不会载入插件和脚本。当您在安装新插件遭遇问题时，可以尝试以安全模式重新执行。</p><h3 id="调试模式"><a href="#调试模式" class="headerlink" title="调试模式"></a>调试模式</h3><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">$ hexo <span class="hljs-comment">--debug</span><br></code></pre></td></tr></table></figure><p>在终端中显示调试信息并记录到 <code>debug.log</code>。当您碰到问题时，可以尝试用调试模式重新执行一次，并 <a href="https://github.com/hexojs/hexo/issues/new">提交调试信息到 GitHub</a>。</p><h3 id="简洁模式"><a href="#简洁模式" class="headerlink" title="简洁模式"></a>简洁模式</h3><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">$ hexo <span class="hljs-comment">--silent</span><br></code></pre></td></tr></table></figure><p>隐藏终端信息。</p><h3 id="自定义配置文件的路径"><a href="#自定义配置文件的路径" class="headerlink" title="自定义配置文件的路径"></a>自定义配置文件的路径</h3><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs verilog"># 使用 custom<span class="hljs-variable">.yml</span> 代替默认的 _config<span class="hljs-variable">.yml</span><br>$ hexo server --<span class="hljs-keyword">config</span> custom<span class="hljs-variable">.yml</span><br><br># 使用 custom<span class="hljs-variable">.yml</span> 和 custom2<span class="hljs-variable">.json</span>，其中 custom2<span class="hljs-variable">.json</span> 优先级更高<br>$ hexo <span class="hljs-keyword">generate</span> --<span class="hljs-keyword">config</span> custom<span class="hljs-variable">.yml</span>,custom2<span class="hljs-variable">.json</span>,custom3<span class="hljs-variable">.yml</span><br></code></pre></td></tr></table></figure><p>自定义配置文件的路径，指定这个参数后将不再使用默认的 <code>_config.yml</code>。<br>你可以使用一个 YAML 或 JSON 文件的路径，也可以使用逗号分隔（无空格）的多个 YAML 或 JSON 文件的路径。例如：</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs verilog"># 使用 custom<span class="hljs-variable">.yml</span> 代替默认的 _config<span class="hljs-variable">.yml</span><br>$ hexo server --<span class="hljs-keyword">config</span> custom<span class="hljs-variable">.yml</span><br><br># 使用 custom<span class="hljs-variable">.yml</span>, custom2<span class="hljs-variable">.json</span> 和 custom3<span class="hljs-variable">.yml</span>，其中 custom3<span class="hljs-variable">.yml</span> 优先级最高，其次是 custom2<span class="hljs-variable">.json</span><br>$ hexo <span class="hljs-keyword">generate</span> --<span class="hljs-keyword">config</span> custom<span class="hljs-variable">.yml</span>,custom2<span class="hljs-variable">.json</span>,custom3<span class="hljs-variable">.yml</span><br></code></pre></td></tr></table></figure><p>当你指定了多个配置文件以后，Hexo 会按顺序将这部分配置文件合并成一个 <code>_multiconfig.yml</code>。如果遇到重复的配置，排在后面的文件的配置会覆盖排在前面的文件的配置。这个原则适用于任意数量、任意深度的 YAML 和 JSON 文件。</p><h3 id="显示草稿"><a href="#显示草稿" class="headerlink" title="显示草稿"></a>显示草稿</h3><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">$ hexo <span class="hljs-comment">--draft</span><br></code></pre></td></tr></table></figure><p>显示 <code>source/_drafts</code> 文件夹中的草稿文章。</p><h3 id="自定义-CWD"><a href="#自定义-CWD" class="headerlink" title="自定义 CWD"></a>自定义 CWD</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">$ hexo --cwd <span class="hljs-regexp">/path/</span>to/cwd<br></code></pre></td></tr></table></figure><p>自定义当前工作目录（Current working directory）的路径。</p>]]></content>
    
    
    
    <tags>
      
      <tag>Hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java中创建线程的方式</title>
    <link href="/itsqh.github.io/2022/08/13/Java%E4%B8%AD%E5%88%9B%E5%BB%BA%E7%BA%BF%E7%A8%8B%E7%9A%84%E6%96%B9%E5%BC%8F/"/>
    <url>/itsqh.github.io/2022/08/13/Java%E4%B8%AD%E5%88%9B%E5%BB%BA%E7%BA%BF%E7%A8%8B%E7%9A%84%E6%96%B9%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="一、Java中创建线程主要有三种方式"><a href="#一、Java中创建线程主要有三种方式" class="headerlink" title="一、Java中创建线程主要有三种方式"></a>一、Java中创建线程主要有三种方式</h1><h3 id="1、继承Thread类创建线程类"><a href="#1、继承Thread类创建线程类" class="headerlink" title="1、继承Thread类创建线程类"></a>1、继承Thread类创建线程类</h3><ul><li>定义Thread类的子类，并重写该类的run方法，该run方法的方法体就代表了线程要完成的任务。因此把run()方法称为执行体。</li><li>创建Thread子类的实例，即创建了线程对象。</li><li>调用线程对象的start()方法来启动该线程。</li></ul><p>示例代码为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.sqh.thread;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyThread</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span> &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100</span>; i++) &#123;<br>            System.out.println(<span class="hljs-built_in">this</span>.getName() + <span class="hljs-string">&quot;  &quot;</span> + i);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyThread</span>().start();<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyThread</span>().start();<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2、通过Runnable接口创建线程类"><a href="#2、通过Runnable接口创建线程类" class="headerlink" title="2、通过Runnable接口创建线程类"></a>2、通过Runnable接口创建线程类</h3><ul><li>定义Runnable接口的实现类，并重写该接口的run()方法，该run()方法的方法体同样是该线程的线程执行体。</li><li>创建Runnable实现类的实例，并以此实例作为Thread的target来创建Thread对象，该Thread对象才是真正的线程对象。</li><li>调用线程对象的start()方法来启动该线程。</li></ul><p>示例代码为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.sqh.thread;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyRunnable</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100</span>; i++) &#123;<br>            System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;  &quot;</span> + i);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">MyRunnable</span> <span class="hljs-variable">myRunnable</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyRunnable</span>();<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(myRunnable).start();<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(myRunnable).start();<br><br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><p>线程的执行流程很简单，当执行代码start()时，就会执行对象中重写的run()方法，该方法执行完成后，线程就消亡了。</p><h3 id="3、通过Callable和Future创建线程"><a href="#3、通过Callable和Future创建线程" class="headerlink" title="3、通过Callable和Future创建线程"></a>3、通过Callable和Future创建线程</h3><p>（1）创建Callable接口的实现类，并实现call()方法，该call()方法将作为线程执行体，并且有返回值。</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs aspectj"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Callable</span> </span>&#123;<br>    <span class="hljs-function">V <span class="hljs-title">call</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>（2）创建Callable实现类的实例，使用FutureTask类来包装Callable对象，该FutureTask对象封装了该Callable对象的call()方法的返回值。（FutureTask是一个包装器，它通过接受Callable来创建，它同时实现了Future和Runnable接口。）</p><p>（3）使用FutureTask对象作为Thread对象的target创建并启动新线程。</p><p>（4）调用FutureTask对象的get()方法来获得子线程执行结束后的返回值。</p><p>实例代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.sqh.thread;<br><br><span class="hljs-keyword">import</span> java.util.concurrent.Callable;<br><span class="hljs-keyword">import</span> java.util.concurrent.FutureTask;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyCallable</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Callable</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">call</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-keyword">return</span> Thread.currentThread().getName();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">MyCallable</span> <span class="hljs-variable">myCallable</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyCallable</span>();<br>        FutureTask&lt;String&gt; ft = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FutureTask</span>&lt;&gt;(myCallable);<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(ft).start();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> ft.get();<br>        System.out.println(<span class="hljs-string">&quot;子线程的返回值：&quot;</span> + str);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="二、创建线程的三种方式的对比"><a href="#二、创建线程的三种方式的对比" class="headerlink" title="二、创建线程的三种方式的对比"></a>二、创建线程的三种方式的对比</h2><h3 id="1、采用实现Runnable、Callable接口的方式创建多线程时"><a href="#1、采用实现Runnable、Callable接口的方式创建多线程时" class="headerlink" title="1、采用实现Runnable、Callable接口的方式创建多线程时"></a>1、采用实现Runnable、Callable接口的方式创建多线程时</h3><p><strong>优势是：</strong></p><p>线程类只是实现了Runnable接口或Callable接口，还可以继承其他类。</p><p>在这种方式下，多个线程可以共享同一个target对象，所以非常适合多个相同线程来处理同一份资源的情况，从而可以将CPU、代码和数据分开，形成清晰的模型，较好地体现了面向对象的思想。</p><p><strong>劣势是：</strong></p><p>编程稍微复杂，如果要访问当前线程，则必须使用Thread.currentThread()方法。</p><h3 id="2、使用继承Thread类的方式创建多线程时"><a href="#2、使用继承Thread类的方式创建多线程时" class="headerlink" title="2、使用继承Thread类的方式创建多线程时"></a>2、使用继承Thread类的方式创建多线程时</h3><p><strong>优势是：</strong></p><p>编写简单，如果需要访问当前线程，则无需使用Thread.currentThread()方法，直接使用this即可获得当前线程。</p><p><strong>劣势是：</strong></p><p>线程类已经继承了Thread类，所以不能再继承其他父类。</p><h3 id="3、Runnable和Callable的区别"><a href="#3、Runnable和Callable的区别" class="headerlink" title="3、Runnable和Callable的区别"></a>3、Runnable和Callable的区别</h3><p>(1) Callable规定（重写）的方法是call()，Runnable规定（重写）的方法是run()。</p><p>(2) Callable的任务执行后可返回值，而Runnable的任务是不能返回值的。</p><p>(3) call方法可以抛出异常，run方法不可以。</p><p>(4) 运行Callable任务可以拿到一个Future对象，表示异步计算的结果。它提供了检查计算是否完成的方法，以等待计算的完成，并检索计算的结果。通过Future对象可以了解任务执行情况，可取消任务的执行，还可获取执行结果。</p><blockquote><h5 id="参考资料：https-segmentfault-com-a-1190000022878543"><a href="#参考资料：https-segmentfault-com-a-1190000022878543" class="headerlink" title="参考资料：https://segmentfault.com/a/1190000022878543"></a>参考资料：<a href="https://segmentfault.com/a/1190000022878543">https://segmentfault.com/a/1190000022878543</a></h5></blockquote>]]></content>
    
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>多线程</tag>
      
      <tag>并发</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
